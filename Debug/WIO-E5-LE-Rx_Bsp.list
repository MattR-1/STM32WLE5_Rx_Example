
WIO-E5-LE-Rx_Bsp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004408  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08004548  08004548  00005548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046dc  080046dc  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080046dc  080046dc  000056dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046e4  080046e4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046e4  080046e4  000056e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046e8  080046e8  000056e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080046ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000005c  08004748  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08004748  000062f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eac1  00000000  00000000  00006086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000234e  00000000  00000000  00014b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00016e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c34  00000000  00000000  00017eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019279  00000000  00000000  00018ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd50  00000000  00000000  00031d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e5b2  00000000  00000000  00041aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e005f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047b0  00000000  00000000  000e00a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000e4854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000005c 	.word	0x2000005c
 800015c:	00000000 	.word	0x00000000
 8000160:	08004530 	.word	0x08004530

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000060 	.word	0x20000060
 800017c:	08004530 	.word	0x08004530

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800051c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800051e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4313      	orrs	r3, r2
 8000526:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800052c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4013      	ands	r3, r2
 8000532:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000534:	68fb      	ldr	r3, [r7, #12]
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08c      	sub	sp, #48	@ 0x30
 8000544:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fbe3 	bl	8000d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f9b1 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 fa5f 	bl	8000a10 <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 8000552:	f000 f9ff 	bl	8000954 <MX_SUBGHZ_Init>
  MX_USART1_UART_Init();
 8000556:	f000 fa0f 	bl	8000978 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  sprintf(uart_buff, "\n\r\n\rReciever:\n\r");
 800055a:	49b1      	ldr	r1, [pc, #708]	@ (8000820 <main+0x2e0>)
 800055c:	48b1      	ldr	r0, [pc, #708]	@ (8000824 <main+0x2e4>)
 800055e:	f003 fb47 	bl	8003bf0 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buff, sizeof(uart_buff), 100);
 8000562:	2364      	movs	r3, #100	@ 0x64
 8000564:	2241      	movs	r2, #65	@ 0x41
 8000566:	49af      	ldr	r1, [pc, #700]	@ (8000824 <main+0x2e4>)
 8000568:	48af      	ldr	r0, [pc, #700]	@ (8000828 <main+0x2e8>)
 800056a:	f002 fd8e 	bl	800308a <HAL_UART_Transmit>
  reset_uart_buff();
 800056e:	f000 fa7d 	bl	8000a6c <reset_uart_buff>

  // 1. Set Buffer Address
  RadioParam[0] = 0x80U; // Tx base address
 8000572:	4bae      	ldr	r3, [pc, #696]	@ (800082c <main+0x2ec>)
 8000574:	2280      	movs	r2, #128	@ 0x80
 8000576:	701a      	strb	r2, [r3, #0]
  RadioParam[1] = 0x00U; // Rx base address
 8000578:	4bac      	ldr	r3, [pc, #688]	@ (800082c <main+0x2ec>)
 800057a:	2200      	movs	r2, #0
 800057c:	705a      	strb	r2, [r3, #1]

  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_BUFFERBASEADDRESS, &RadioParam, 2) != HAL_OK)
 800057e:	2302      	movs	r3, #2
 8000580:	4aaa      	ldr	r2, [pc, #680]	@ (800082c <main+0x2ec>)
 8000582:	218f      	movs	r1, #143	@ 0x8f
 8000584:	48aa      	ldr	r0, [pc, #680]	@ (8000830 <main+0x2f0>)
 8000586:	f002 fae4 	bl	8002b52 <HAL_SUBGHZ_ExecSetCmd>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <main+0x54>
  {
	  Error_Handler();
 8000590:	f000 fa86 	bl	8000aa0 <Error_Handler>
  }

  // 2. Set Packet Type
  RadioParam[0] = 0x01U; //LoRa packet type
 8000594:	4ba5      	ldr	r3, [pc, #660]	@ (800082c <main+0x2ec>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]

  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_PACKETTYPE, &RadioParam, 1) != HAL_OK)
 800059a:	2301      	movs	r3, #1
 800059c:	4aa3      	ldr	r2, [pc, #652]	@ (800082c <main+0x2ec>)
 800059e:	218a      	movs	r1, #138	@ 0x8a
 80005a0:	48a3      	ldr	r0, [pc, #652]	@ (8000830 <main+0x2f0>)
 80005a2:	f002 fad6 	bl	8002b52 <HAL_SUBGHZ_ExecSetCmd>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <main+0x70>
  {
	  Error_Handler();
 80005ac:	f000 fa78 	bl	8000aa0 <Error_Handler>
  }


  // 3. Set Frame Format
  RadioParam[0] = 0x00U; // PbLength MSB - 12-symbol-long preamble sequence
 80005b0:	4b9e      	ldr	r3, [pc, #632]	@ (800082c <main+0x2ec>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
  RadioParam[1] = 0x0CU; // PbLength LSB - 12-symbol-long preamble sequence
 80005b6:	4b9d      	ldr	r3, [pc, #628]	@ (800082c <main+0x2ec>)
 80005b8:	220c      	movs	r2, #12
 80005ba:	705a      	strb	r2, [r3, #1]
  RadioParam[2] = 0x00U; // explicit header type
 80005bc:	4b9b      	ldr	r3, [pc, #620]	@ (800082c <main+0x2ec>)
 80005be:	2200      	movs	r2, #0
 80005c0:	709a      	strb	r2, [r3, #2]
  RadioParam[3] = 0x40U; // 64 bit packet length.
 80005c2:	4b9a      	ldr	r3, [pc, #616]	@ (800082c <main+0x2ec>)
 80005c4:	2240      	movs	r2, #64	@ 0x40
 80005c6:	70da      	strb	r2, [r3, #3]
  RadioParam[4] = 0x01U; // CRC enabled
 80005c8:	4b98      	ldr	r3, [pc, #608]	@ (800082c <main+0x2ec>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	711a      	strb	r2, [r3, #4]
  RadioParam[5] = 0x00U; // standard IQ setup
 80005ce:	4b97      	ldr	r3, [pc, #604]	@ (800082c <main+0x2ec>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	715a      	strb	r2, [r3, #5]

  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_PACKETPARAMS, &RadioParam, 6) != HAL_OK)
 80005d4:	2306      	movs	r3, #6
 80005d6:	4a95      	ldr	r2, [pc, #596]	@ (800082c <main+0x2ec>)
 80005d8:	218c      	movs	r1, #140	@ 0x8c
 80005da:	4895      	ldr	r0, [pc, #596]	@ (8000830 <main+0x2f0>)
 80005dc:	f002 fab9 	bl	8002b52 <HAL_SUBGHZ_ExecSetCmd>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <main+0xaa>
  {
	  Error_Handler();
 80005e6:	f000 fa5b 	bl	8000aa0 <Error_Handler>
  }


  // 4. Define synchronisation word
  RadioParam[0] = 0x14U; // LoRa private network
 80005ea:	4b90      	ldr	r3, [pc, #576]	@ (800082c <main+0x2ec>)
 80005ec:	2214      	movs	r2, #20
 80005ee:	701a      	strb	r2, [r3, #0]
  RadioParam[1] = 0x24U; // LoRa private network
 80005f0:	4b8e      	ldr	r3, [pc, #568]	@ (800082c <main+0x2ec>)
 80005f2:	2224      	movs	r2, #36	@ 0x24
 80005f4:	705a      	strb	r2, [r3, #1]

  if (HAL_SUBGHZ_WriteRegisters(&hsubghz, (uint16_t) 0x740, &RadioParam, 2) != HAL_OK)
 80005f6:	2302      	movs	r3, #2
 80005f8:	4a8c      	ldr	r2, [pc, #560]	@ (800082c <main+0x2ec>)
 80005fa:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 80005fe:	488c      	ldr	r0, [pc, #560]	@ (8000830 <main+0x2f0>)
 8000600:	f002 fa48 	bl	8002a94 <HAL_SUBGHZ_WriteRegisters>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <main+0xce>
  {
	  Error_Handler();
 800060a:	f000 fa49 	bl	8000aa0 <Error_Handler>
  }


  // 5. Define RF Frequency
  RadioParam[0] = 0x33U; //RF frequency - 868000000Hz
 800060e:	4b87      	ldr	r3, [pc, #540]	@ (800082c <main+0x2ec>)
 8000610:	2233      	movs	r2, #51	@ 0x33
 8000612:	701a      	strb	r2, [r3, #0]
  RadioParam[1] = 0xBCU; //RF frequency - 868000000Hz
 8000614:	4b85      	ldr	r3, [pc, #532]	@ (800082c <main+0x2ec>)
 8000616:	22bc      	movs	r2, #188	@ 0xbc
 8000618:	705a      	strb	r2, [r3, #1]
  RadioParam[2] = 0xA1U; //RF frequency - 868000000Hz
 800061a:	4b84      	ldr	r3, [pc, #528]	@ (800082c <main+0x2ec>)
 800061c:	22a1      	movs	r2, #161	@ 0xa1
 800061e:	709a      	strb	r2, [r3, #2]
  RadioParam[3] = 0x00U; //RF frequency - 868000000Hz
 8000620:	4b82      	ldr	r3, [pc, #520]	@ (800082c <main+0x2ec>)
 8000622:	2200      	movs	r2, #0
 8000624:	70da      	strb	r2, [r3, #3]

  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_RFFREQUENCY, &RadioParam, 4) != HAL_OK)
 8000626:	2304      	movs	r3, #4
 8000628:	4a80      	ldr	r2, [pc, #512]	@ (800082c <main+0x2ec>)
 800062a:	2186      	movs	r1, #134	@ 0x86
 800062c:	4880      	ldr	r0, [pc, #512]	@ (8000830 <main+0x2f0>)
 800062e:	f002 fa90 	bl	8002b52 <HAL_SUBGHZ_ExecSetCmd>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <main+0xfc>
  {
	  Error_Handler();
 8000638:	f000 fa32 	bl	8000aa0 <Error_Handler>
  }


  // 6. Set Modulation parameter
  RadioParam[0] = 0x07U; // SF (Spreading factor) - 7 (default)
 800063c:	4b7b      	ldr	r3, [pc, #492]	@ (800082c <main+0x2ec>)
 800063e:	2207      	movs	r2, #7
 8000640:	701a      	strb	r2, [r3, #0]
  RadioParam[1] = 0x09U; // BW (Bandwidth) - 20.83kHz
 8000642:	4b7a      	ldr	r3, [pc, #488]	@ (800082c <main+0x2ec>)
 8000644:	2209      	movs	r2, #9
 8000646:	705a      	strb	r2, [r3, #1]
  RadioParam[2] = 0x01U; // CR (Forward error correction coding rate) - 4/5
 8000648:	4b78      	ldr	r3, [pc, #480]	@ (800082c <main+0x2ec>)
 800064a:	2201      	movs	r2, #1
 800064c:	709a      	strb	r2, [r3, #2]
  RadioParam[3] = 0x00U; // LDRO (Low data rate optimization) - off
 800064e:	4b77      	ldr	r3, [pc, #476]	@ (800082c <main+0x2ec>)
 8000650:	2200      	movs	r2, #0
 8000652:	70da      	strb	r2, [r3, #3]

  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_MODULATIONPARAMS, &RadioParam, 4) != HAL_OK)
 8000654:	2304      	movs	r3, #4
 8000656:	4a75      	ldr	r2, [pc, #468]	@ (800082c <main+0x2ec>)
 8000658:	218b      	movs	r1, #139	@ 0x8b
 800065a:	4875      	ldr	r0, [pc, #468]	@ (8000830 <main+0x2f0>)
 800065c:	f002 fa79 	bl	8002b52 <HAL_SUBGHZ_ExecSetCmd>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <main+0x12a>
  {
	  Error_Handler();
 8000666:	f000 fa1b 	bl	8000aa0 <Error_Handler>
  }


  // 10. Configure interrupts
  RadioParam[0] = 0x01U; // IRQ Mask MSB - Timeout interrupt
 800066a:	4b70      	ldr	r3, [pc, #448]	@ (800082c <main+0x2ec>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
  RadioParam[1] = 0x02U; // IRQ Mask LSB - Rx done interrupt
 8000670:	4b6e      	ldr	r3, [pc, #440]	@ (800082c <main+0x2ec>)
 8000672:	2202      	movs	r2, #2
 8000674:	705a      	strb	r2, [r3, #1]
  RadioParam[2] = 0x00U; // IRQ1 Line Mask MSB
 8000676:	4b6d      	ldr	r3, [pc, #436]	@ (800082c <main+0x2ec>)
 8000678:	2200      	movs	r2, #0
 800067a:	709a      	strb	r2, [r3, #2]
  RadioParam[3] = 0x03U; // IRQ1 Line Mask LSB - Rx done interrupt on IRQ line 1
 800067c:	4b6b      	ldr	r3, [pc, #428]	@ (800082c <main+0x2ec>)
 800067e:	2203      	movs	r2, #3
 8000680:	70da      	strb	r2, [r3, #3]
  RadioParam[4] = 0x01U; // IRQ2 Line Mask MSB - Timeout interrupt on IRQ line 2
 8000682:	4b6a      	ldr	r3, [pc, #424]	@ (800082c <main+0x2ec>)
 8000684:	2201      	movs	r2, #1
 8000686:	711a      	strb	r2, [r3, #4]
  RadioParam[5] = 0x00U; // IRQ2 Line Mask LSB
 8000688:	4b68      	ldr	r3, [pc, #416]	@ (800082c <main+0x2ec>)
 800068a:	2200      	movs	r2, #0
 800068c:	715a      	strb	r2, [r3, #5]
  RadioParam[6] = 0x00U; // IRQ3 Line Mask MSB
 800068e:	4b67      	ldr	r3, [pc, #412]	@ (800082c <main+0x2ec>)
 8000690:	2200      	movs	r2, #0
 8000692:	719a      	strb	r2, [r3, #6]
  RadioParam[7] = 0x00U; // IRQ3 Line Mask LSB
 8000694:	4b65      	ldr	r3, [pc, #404]	@ (800082c <main+0x2ec>)
 8000696:	2200      	movs	r2, #0
 8000698:	71da      	strb	r2, [r3, #7]

  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_CFG_DIOIRQ, &RadioParam, 8) != HAL_OK)
 800069a:	2308      	movs	r3, #8
 800069c:	4a63      	ldr	r2, [pc, #396]	@ (800082c <main+0x2ec>)
 800069e:	2108      	movs	r1, #8
 80006a0:	4863      	ldr	r0, [pc, #396]	@ (8000830 <main+0x2f0>)
 80006a2:	f002 fa56 	bl	8002b52 <HAL_SUBGHZ_ExecSetCmd>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <main+0x170>
  {
	  Error_Handler();
 80006ac:	f000 f9f8 	bl	8000aa0 <Error_Handler>
  }


  // 10.1 Readout interrupts
  if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_IRQSTATUS, &interrupts, 3) != HAL_OK)
 80006b0:	2303      	movs	r3, #3
 80006b2:	4a60      	ldr	r2, [pc, #384]	@ (8000834 <main+0x2f4>)
 80006b4:	2112      	movs	r1, #18
 80006b6:	485e      	ldr	r0, [pc, #376]	@ (8000830 <main+0x2f0>)
 80006b8:	f002 faaa 	bl	8002c10 <HAL_SUBGHZ_ExecGetCmd>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <main+0x186>
  {
	  Error_Handler();
 80006c2:	f000 f9ed 	bl	8000aa0 <Error_Handler>
  }

  sprintf(uart_buff, "Interrupts after set:  %i %i %i \n\r", interrupts[0], interrupts[1], interrupts[2]);
 80006c6:	4b5b      	ldr	r3, [pc, #364]	@ (8000834 <main+0x2f4>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b59      	ldr	r3, [pc, #356]	@ (8000834 <main+0x2f4>)
 80006ce:	785b      	ldrb	r3, [r3, #1]
 80006d0:	4619      	mov	r1, r3
 80006d2:	4b58      	ldr	r3, [pc, #352]	@ (8000834 <main+0x2f4>)
 80006d4:	789b      	ldrb	r3, [r3, #2]
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	460b      	mov	r3, r1
 80006da:	4957      	ldr	r1, [pc, #348]	@ (8000838 <main+0x2f8>)
 80006dc:	4851      	ldr	r0, [pc, #324]	@ (8000824 <main+0x2e4>)
 80006de:	f003 fa87 	bl	8003bf0 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buff, sizeof(uart_buff), 100);
 80006e2:	2364      	movs	r3, #100	@ 0x64
 80006e4:	2241      	movs	r2, #65	@ 0x41
 80006e6:	494f      	ldr	r1, [pc, #316]	@ (8000824 <main+0x2e4>)
 80006e8:	484f      	ldr	r0, [pc, #316]	@ (8000828 <main+0x2e8>)
 80006ea:	f002 fcce 	bl	800308a <HAL_UART_Transmit>
  reset_uart_buff();
 80006ee:	f000 f9bd 	bl	8000a6c <reset_uart_buff>
  //RadioParam[0] = 0x0EU;
  //RadioParam[1] = 0xA6U;
  //RadioParam[2] = 0x00U;

  // Timeout disabled
  RadioParam[0] = 0x00U;
 80006f2:	4b4e      	ldr	r3, [pc, #312]	@ (800082c <main+0x2ec>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
  RadioParam[1] = 0x00U;
 80006f8:	4b4c      	ldr	r3, [pc, #304]	@ (800082c <main+0x2ec>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	705a      	strb	r2, [r3, #1]
  RadioParam[2] = 0x00U;
 80006fe:	4b4b      	ldr	r3, [pc, #300]	@ (800082c <main+0x2ec>)
 8000700:	2200      	movs	r2, #0
 8000702:	709a      	strb	r2, [r3, #2]

  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_RX, &RadioParam, 3) != HAL_OK)
 8000704:	2303      	movs	r3, #3
 8000706:	4a49      	ldr	r2, [pc, #292]	@ (800082c <main+0x2ec>)
 8000708:	2182      	movs	r1, #130	@ 0x82
 800070a:	4849      	ldr	r0, [pc, #292]	@ (8000830 <main+0x2f0>)
 800070c:	f002 fa21 	bl	8002b52 <HAL_SUBGHZ_ExecSetCmd>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <main+0x1da>
  {
	  Error_Handler();
 8000716:	f000 f9c3 	bl	8000aa0 <Error_Handler>
  }


  HAL_Delay(5000);
 800071a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800071e:	f000 fb6d 	bl	8000dfc <HAL_Delay>


  // 9. Read Payload
  if (HAL_SUBGHZ_ReadBuffer(&hsubghz, 0, &payload, 64) != HAL_OK)
 8000722:	2340      	movs	r3, #64	@ 0x40
 8000724:	4a45      	ldr	r2, [pc, #276]	@ (800083c <main+0x2fc>)
 8000726:	2100      	movs	r1, #0
 8000728:	4841      	ldr	r0, [pc, #260]	@ (8000830 <main+0x2f0>)
 800072a:	f002 fac5 	bl	8002cb8 <HAL_SUBGHZ_ReadBuffer>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <main+0x1f8>
  {
	  Error_Handler();
 8000734:	f000 f9b4 	bl	8000aa0 <Error_Handler>
  }


  // Write Payload to UART
  sprintf(uart_buff, "Payload: %s \n\r", payload);
 8000738:	4a40      	ldr	r2, [pc, #256]	@ (800083c <main+0x2fc>)
 800073a:	4941      	ldr	r1, [pc, #260]	@ (8000840 <main+0x300>)
 800073c:	4839      	ldr	r0, [pc, #228]	@ (8000824 <main+0x2e4>)
 800073e:	f003 fa57 	bl	8003bf0 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buff, sizeof(uart_buff), 100);
 8000742:	2364      	movs	r3, #100	@ 0x64
 8000744:	2241      	movs	r2, #65	@ 0x41
 8000746:	4937      	ldr	r1, [pc, #220]	@ (8000824 <main+0x2e4>)
 8000748:	4837      	ldr	r0, [pc, #220]	@ (8000828 <main+0x2e8>)
 800074a:	f002 fc9e 	bl	800308a <HAL_UART_Transmit>
  reset_uart_buff();
 800074e:	f000 f98d 	bl	8000a6c <reset_uart_buff>


  //check interrupts
  uint8_t bits[24] = {0};
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]



  // print Table header for debugging
  sprintf(uart_buff, "\n\rReciever interrupts in bits:\n\r");
 8000766:	4937      	ldr	r1, [pc, #220]	@ (8000844 <main+0x304>)
 8000768:	482e      	ldr	r0, [pc, #184]	@ (8000824 <main+0x2e4>)
 800076a:	f003 fa41 	bl	8003bf0 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buff, sizeof(uart_buff), 100);
 800076e:	2364      	movs	r3, #100	@ 0x64
 8000770:	2241      	movs	r2, #65	@ 0x41
 8000772:	492c      	ldr	r1, [pc, #176]	@ (8000824 <main+0x2e4>)
 8000774:	482c      	ldr	r0, [pc, #176]	@ (8000828 <main+0x2e8>)
 8000776:	f002 fc88 	bl	800308a <HAL_UART_Transmit>
  reset_uart_buff();
 800077a:	f000 f977 	bl	8000a6c <reset_uart_buff>

  for (int i = 0; i < 24; i++)
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
 8000782:	e00f      	b.n	80007a4 <main+0x264>
  {
	  sprintf(uart_buff, "%i |", i);
 8000784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000786:	4930      	ldr	r1, [pc, #192]	@ (8000848 <main+0x308>)
 8000788:	4826      	ldr	r0, [pc, #152]	@ (8000824 <main+0x2e4>)
 800078a:	f003 fa31 	bl	8003bf0 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buff, sizeof(uart_buff), 100);
 800078e:	2364      	movs	r3, #100	@ 0x64
 8000790:	2241      	movs	r2, #65	@ 0x41
 8000792:	4924      	ldr	r1, [pc, #144]	@ (8000824 <main+0x2e4>)
 8000794:	4824      	ldr	r0, [pc, #144]	@ (8000828 <main+0x2e8>)
 8000796:	f002 fc78 	bl	800308a <HAL_UART_Transmit>
	  reset_uart_buff();
 800079a:	f000 f967 	bl	8000a6c <reset_uart_buff>
  for (int i = 0; i < 24; i++)
 800079e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a0:	3301      	adds	r3, #1
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80007a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a6:	2b17      	cmp	r3, #23
 80007a8:	ddec      	ble.n	8000784 <main+0x244>
  }

  sprintf(uart_buff, "\n\r");
 80007aa:	4928      	ldr	r1, [pc, #160]	@ (800084c <main+0x30c>)
 80007ac:	481d      	ldr	r0, [pc, #116]	@ (8000824 <main+0x2e4>)
 80007ae:	f003 fa1f 	bl	8003bf0 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buff, sizeof(uart_buff), 100);
 80007b2:	2364      	movs	r3, #100	@ 0x64
 80007b4:	2241      	movs	r2, #65	@ 0x41
 80007b6:	491b      	ldr	r1, [pc, #108]	@ (8000824 <main+0x2e4>)
 80007b8:	481b      	ldr	r0, [pc, #108]	@ (8000828 <main+0x2e8>)
 80007ba:	f002 fc66 	bl	800308a <HAL_UART_Transmit>
  reset_uart_buff();
 80007be:	f000 f955 	bl	8000a6c <reset_uart_buff>


  //readout interrupts and print it into the table
  do
  {
	  if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_IRQSTATUS, &interrupts, 3) != HAL_OK)
 80007c2:	2303      	movs	r3, #3
 80007c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000834 <main+0x2f4>)
 80007c6:	2112      	movs	r1, #18
 80007c8:	4819      	ldr	r0, [pc, #100]	@ (8000830 <main+0x2f0>)
 80007ca:	f002 fa21 	bl	8002c10 <HAL_SUBGHZ_ExecGetCmd>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <main+0x298>
	  {
		  Error_Handler();
 80007d4:	f000 f964 	bl	8000aa0 <Error_Handler>
	  }

	  for (int i = 0; i < 3; i++) {
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
 80007dc:	e00d      	b.n	80007fa <main+0x2ba>
		  uint8_to_bits(interrupts[i], &bits[i * 8]);
 80007de:	4a15      	ldr	r2, [pc, #84]	@ (8000834 <main+0x2f4>)
 80007e0:	6a3b      	ldr	r3, [r7, #32]
 80007e2:	4413      	add	r3, r2
 80007e4:	7818      	ldrb	r0, [r3, #0]
 80007e6:	6a3b      	ldr	r3, [r7, #32]
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	1d3a      	adds	r2, r7, #4
 80007ec:	4413      	add	r3, r2
 80007ee:	4619      	mov	r1, r3
 80007f0:	f000 f918 	bl	8000a24 <uint8_to_bits>
	  for (int i = 0; i < 3; i++) {
 80007f4:	6a3b      	ldr	r3, [r7, #32]
 80007f6:	3301      	adds	r3, #1
 80007f8:	623b      	str	r3, [r7, #32]
 80007fa:	6a3b      	ldr	r3, [r7, #32]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	ddee      	ble.n	80007de <main+0x29e>
	  }

	  for (int i = 0; i < 24; i++)
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
 8000804:	e038      	b.n	8000878 <main+0x338>
	  {
		  if(i < 10)
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	2b09      	cmp	r3, #9
 800080a:	dc21      	bgt.n	8000850 <main+0x310>
		  {
			  sprintf(uart_buff, "%i |", bits[i]);
 800080c:	1d3a      	adds	r2, r7, #4
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	4413      	add	r3, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	490c      	ldr	r1, [pc, #48]	@ (8000848 <main+0x308>)
 8000818:	4802      	ldr	r0, [pc, #8]	@ (8000824 <main+0x2e4>)
 800081a:	f003 f9e9 	bl	8003bf0 <siprintf>
 800081e:	e020      	b.n	8000862 <main+0x322>
 8000820:	08004548 	.word	0x08004548
 8000824:	20000164 	.word	0x20000164
 8000828:	20000084 	.word	0x20000084
 800082c:	20000118 	.word	0x20000118
 8000830:	20000078 	.word	0x20000078
 8000834:	20000120 	.word	0x20000120
 8000838:	08004558 	.word	0x08004558
 800083c:	20000124 	.word	0x20000124
 8000840:	0800457c 	.word	0x0800457c
 8000844:	0800458c 	.word	0x0800458c
 8000848:	080045b0 	.word	0x080045b0
 800084c:	080045b8 	.word	0x080045b8
		  } else
		  {
			  sprintf(uart_buff, "%i  |", bits[i]);
 8000850:	1d3a      	adds	r2, r7, #4
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	4413      	add	r3, r2
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4911      	ldr	r1, [pc, #68]	@ (80008a0 <main+0x360>)
 800085c:	4811      	ldr	r0, [pc, #68]	@ (80008a4 <main+0x364>)
 800085e:	f003 f9c7 	bl	8003bf0 <siprintf>
		  }
		  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buff, sizeof(uart_buff), 100);
 8000862:	2364      	movs	r3, #100	@ 0x64
 8000864:	2241      	movs	r2, #65	@ 0x41
 8000866:	490f      	ldr	r1, [pc, #60]	@ (80008a4 <main+0x364>)
 8000868:	480f      	ldr	r0, [pc, #60]	@ (80008a8 <main+0x368>)
 800086a:	f002 fc0e 	bl	800308a <HAL_UART_Transmit>
		  reset_uart_buff();
 800086e:	f000 f8fd 	bl	8000a6c <reset_uart_buff>
	  for (int i = 0; i < 24; i++)
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3301      	adds	r3, #1
 8000876:	61fb      	str	r3, [r7, #28]
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	2b17      	cmp	r3, #23
 800087c:	ddc3      	ble.n	8000806 <main+0x2c6>
	  }

	  sprintf(uart_buff, "\n\r");
 800087e:	490b      	ldr	r1, [pc, #44]	@ (80008ac <main+0x36c>)
 8000880:	4808      	ldr	r0, [pc, #32]	@ (80008a4 <main+0x364>)
 8000882:	f003 f9b5 	bl	8003bf0 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buff, sizeof(uart_buff), 100);
 8000886:	2364      	movs	r3, #100	@ 0x64
 8000888:	2241      	movs	r2, #65	@ 0x41
 800088a:	4906      	ldr	r1, [pc, #24]	@ (80008a4 <main+0x364>)
 800088c:	4806      	ldr	r0, [pc, #24]	@ (80008a8 <main+0x368>)
 800088e:	f002 fbfc 	bl	800308a <HAL_UART_Transmit>
	  reset_uart_buff();
 8000892:	f000 f8eb 	bl	8000a6c <reset_uart_buff>

	  HAL_Delay(5000);
 8000896:	f241 3088 	movw	r0, #5000	@ 0x1388
 800089a:	f000 faaf 	bl	8000dfc <HAL_Delay>
	  if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_IRQSTATUS, &interrupts, 3) != HAL_OK)
 800089e:	e790      	b.n	80007c2 <main+0x282>
 80008a0:	080045bc 	.word	0x080045bc
 80008a4:	20000164 	.word	0x20000164
 80008a8:	20000084 	.word	0x20000084
 80008ac:	080045b8 	.word	0x080045b8

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b09a      	sub	sp, #104	@ 0x68
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	2248      	movs	r2, #72	@ 0x48
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 f9b6 	bl	8003c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	f107 0308 	add.w	r3, r7, #8
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
 80008d4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <SystemClock_Config+0xa0>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80008de:	4a1c      	ldr	r2, [pc, #112]	@ (8000950 <SystemClock_Config+0xa0>)
 80008e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <SystemClock_Config+0xa0>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008f2:	2320      	movs	r3, #32
 80008f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008f6:	2301      	movs	r3, #1
 80008f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008fe:	2360      	movs	r3, #96	@ 0x60
 8000900:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000902:	2300      	movs	r3, #0
 8000904:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	4618      	mov	r0, r3
 800090c:	f000 ff86 	bl	800181c <HAL_RCC_OscConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000916:	f000 f8c3 	bl	8000aa0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800091a:	234f      	movs	r3, #79	@ 0x4f
 800091c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f001 faf1 	bl	8001f20 <HAL_RCC_ClockConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000944:	f000 f8ac 	bl	8000aa0 <Error_Handler>
  }
}
 8000948:	bf00      	nop
 800094a:	3768      	adds	r7, #104	@ 0x68
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	58000400 	.word	0x58000400

08000954 <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
static void MX_SUBGHZ_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_SUBGHZ_Init+0x20>)
 800095a:	2210      	movs	r2, #16
 800095c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	@ (8000974 <MX_SUBGHZ_Init+0x20>)
 8000960:	f002 f834 	bl	80029cc <HAL_SUBGHZ_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800096a:	f000 f899 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000078 	.word	0x20000078

08000978 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800097c:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <MX_USART1_UART_Init+0x90>)
 800097e:	4a23      	ldr	r2, [pc, #140]	@ (8000a0c <MX_USART1_UART_Init+0x94>)
 8000980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000982:	4b21      	ldr	r3, [pc, #132]	@ (8000a08 <MX_USART1_UART_Init+0x90>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <MX_USART1_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b1d      	ldr	r3, [pc, #116]	@ (8000a08 <MX_USART1_UART_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000996:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <MX_USART1_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <MX_USART1_UART_Init+0x90>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <MX_USART1_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <MX_USART1_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <MX_USART1_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b4:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <MX_USART1_UART_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ba:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <MX_USART1_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c0:	4811      	ldr	r0, [pc, #68]	@ (8000a08 <MX_USART1_UART_Init+0x90>)
 80009c2:	f002 fb12 	bl	8002fea <HAL_UART_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009cc:	f000 f868 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d0:	2100      	movs	r1, #0
 80009d2:	480d      	ldr	r0, [pc, #52]	@ (8000a08 <MX_USART1_UART_Init+0x90>)
 80009d4:	f003 f843 	bl	8003a5e <HAL_UARTEx_SetTxFifoThreshold>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009de:	f000 f85f 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4808      	ldr	r0, [pc, #32]	@ (8000a08 <MX_USART1_UART_Init+0x90>)
 80009e6:	f003 f878 	bl	8003ada <HAL_UARTEx_SetRxFifoThreshold>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009f0:	f000 f856 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	@ (8000a08 <MX_USART1_UART_Init+0x90>)
 80009f6:	f002 fffa 	bl	80039ee <HAL_UARTEx_DisableFifoMode>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a00:	f000 f84e 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000084 	.word	0x20000084
 8000a0c:	40013800 	.word	0x40013800

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff fd7b 	bl	8000510 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f7ff fd78 	bl	8000510 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <uint8_to_bits>:

/* USER CODE BEGIN 4 */
void uint8_to_bits(uint8_t num, uint8_t *bits_array) {
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
    for (int i = 7; i >= 0; i--) {
 8000a30:	2307      	movs	r3, #7
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	e010      	b.n	8000a58 <uint8_to_bits+0x34>
        bits_array[i] = (num >> (7 - i)) & 0x01;
 8000a36:	79fa      	ldrb	r2, [r7, #7]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f1c3 0307 	rsb	r3, r3, #7
 8000a3e:	fa42 f303 	asr.w	r3, r2, r3
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	6839      	ldr	r1, [r7, #0]
 8000a48:	440b      	add	r3, r1
 8000a4a:	f002 0201 	and.w	r2, r2, #1
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	701a      	strb	r2, [r3, #0]
    for (int i = 7; i >= 0; i--) {
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3b01      	subs	r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	daeb      	bge.n	8000a36 <uint8_to_bits+0x12>
    }
}
 8000a5e:	bf00      	nop
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
	...

08000a6c <reset_uart_buff>:


void reset_uart_buff(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
	for(int i = 0; i < 100; i++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	e007      	b.n	8000a88 <reset_uart_buff+0x1c>
	{
		uart_buff[i] = 0;
 8000a78:	4a08      	ldr	r2, [pc, #32]	@ (8000a9c <reset_uart_buff+0x30>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 100; i++)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3301      	adds	r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b63      	cmp	r3, #99	@ 0x63
 8000a8c:	ddf4      	ble.n	8000a78 <reset_uart_buff+0xc>
	}
}
 8000a8e:	bf00      	nop
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000164 	.word	0x20000164

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <Error_Handler+0x8>

08000aac <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ab8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000aba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ac8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4013      	ands	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ae8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000aea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000af4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000af8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4013      	ands	r3, r2
 8000afe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b00:	68fb      	ldr	r3, [r7, #12]
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b18:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000b1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b28:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b30:	68fb      	ldr	r3, [r7, #12]
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000b50:	2001      	movs	r0, #1
 8000b52:	f7ff ffdb 	bl	8000b0c <LL_APB3_GRP1_EnableClock>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b096      	sub	sp, #88	@ 0x58
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	2238      	movs	r2, #56	@ 0x38
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 f855 	bl	8003c30 <memset>
  if(huart->Instance==USART1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a16      	ldr	r2, [pc, #88]	@ (8000be4 <HAL_UART_MspInit+0x84>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d125      	bne.n	8000bdc <HAL_UART_MspInit+0x7c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b90:	2301      	movs	r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b94:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000b98:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 fd60 	bl	8002664 <HAL_RCCEx_PeriphCLKConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000baa:	f7ff ff79 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bae:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000bb2:	f7ff ff93 	bl	8000adc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	f7ff ff78 	bl	8000aac <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000bbc:	23c0      	movs	r3, #192	@ 0xc0
 8000bbe:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bcc:	2307      	movs	r3, #7
 8000bce:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4804      	ldr	r0, [pc, #16]	@ (8000be8 <HAL_UART_MspInit+0x88>)
 8000bd8:	f000 fa16 	bl	8001008 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bdc:	bf00      	nop
 8000bde:	3758      	adds	r7, #88	@ 0x58
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40013800 	.word	0x40013800
 8000be8:	48000400 	.word	0x48000400

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <MemManage_Handler+0x4>

08000c04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3c:	f000 f8c2 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ca0 <_sbrk+0x5c>)
 8000c4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <_sbrk+0x60>)
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c58:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d102      	bne.n	8000c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c60:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <_sbrk+0x64>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	@ (8000cac <_sbrk+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c66:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d207      	bcs.n	8000c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c74:	f002 ffe4 	bl	8003c40 <__errno>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	e009      	b.n	8000c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c84:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	4a05      	ldr	r2, [pc, #20]	@ (8000ca8 <_sbrk+0x64>)
 8000c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20010000 	.word	0x20010000
 8000ca4:	00000400 	.word	0x00000400
 8000ca8:	200001a8 	.word	0x200001a8
 8000cac:	200002f8 	.word	0x200002f8

08000cb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cbc:	480d      	ldr	r0, [pc, #52]	@ (8000cf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cbe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc0:	f7ff fff6 	bl	8000cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	@ (8000cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <LoopForever+0xe>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d08 <LoopForever+0x16>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cea:	f002 ffaf 	bl	8003c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cee:	f7ff fc27 	bl	8000540 <main>

08000cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf2:	e7fe      	b.n	8000cf2 <LoopForever>
  ldr   r0, =_estack
 8000cf4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d00:	080046ec 	.word	0x080046ec
  ldr r2, =_sbss
 8000d04:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d08:	200002f8 	.word	0x200002f8

08000d0c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1a:	2003      	movs	r0, #3
 8000d1c:	f000 f942 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000d20:	f001 fac2 	bl	80022a8 <HAL_RCC_GetHCLKFreq>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4a09      	ldr	r2, [pc, #36]	@ (8000d4c <HAL_Init+0x3c>)
 8000d28:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2a:	200f      	movs	r0, #15
 8000d2c:	f000 f810 	bl	8000d50 <HAL_InitTick>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	71fb      	strb	r3, [r7, #7]
 8000d3a:	e001      	b.n	8000d40 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d3c:	f7ff fefe 	bl	8000b3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d40:	79fb      	ldrb	r3, [r7, #7]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000000 	.word	0x20000000

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d5c:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <HAL_InitTick+0x6c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d024      	beq.n	8000dae <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d64:	f001 faa0 	bl	80022a8 <HAL_RCC_GetHCLKFreq>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <HAL_InitTick+0x6c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d74:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 f936 	bl	8000fee <HAL_SYSTICK_Config>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d10f      	bne.n	8000da8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b0f      	cmp	r3, #15
 8000d8c:	d809      	bhi.n	8000da2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	f04f 30ff 	mov.w	r0, #4294967295
 8000d96:	f000 f910 	bl	8000fba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d9a:	4a09      	ldr	r2, [pc, #36]	@ (8000dc0 <HAL_InitTick+0x70>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	e007      	b.n	8000db2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
 8000da6:	e004      	b.n	8000db2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	e001      	b.n	8000db2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <HAL_IncTick+0x1c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b05      	ldr	r3, [pc, #20]	@ (8000de4 <HAL_IncTick+0x20>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a03      	ldr	r2, [pc, #12]	@ (8000de4 <HAL_IncTick+0x20>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	20000008 	.word	0x20000008
 8000de4:	200001ac 	.word	0x200001ac

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b02      	ldr	r3, [pc, #8]	@ (8000df8 <HAL_GetTick+0x10>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	200001ac 	.word	0x200001ac

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff fff0 	bl	8000de8 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffe0 	bl	8000de8 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	@ (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	@ (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	@ (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	@ 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	@ 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff90 	bl	8000ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff49 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc8:	f7ff ff60 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8000fcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	6978      	ldr	r0, [r7, #20]
 8000fd4:	f7ff ff92 	bl	8000efc <NVIC_EncodePriority>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff61 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ffb2 	bl	8000f60 <SysTick_Config>
 8000ffc:	4603      	mov	r3, r0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001016:	e140      	b.n	800129a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
 8001024:	4013      	ands	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 8132 	beq.w	8001294 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b01      	cmp	r3, #1
 800103a:	d005      	beq.n	8001048 <HAL_GPIO_Init+0x40>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d130      	bne.n	80010aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800107e:	2201      	movs	r2, #1
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	091b      	lsrs	r3, r3, #4
 8001094:	f003 0201 	and.w	r2, r3, #1
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d017      	beq.n	80010e6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d123      	bne.n	800113a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	691a      	ldr	r2, [r3, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	6939      	ldr	r1, [r7, #16]
 8001136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0203 	and.w	r2, r3, #3
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 808c 	beq.w	8001294 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800117c:	4a4e      	ldr	r2, [pc, #312]	@ (80012b8 <HAL_GPIO_Init+0x2b0>)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	3302      	adds	r3, #2
 8001184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	2207      	movs	r2, #7
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011a6:	d00d      	beq.n	80011c4 <HAL_GPIO_Init+0x1bc>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a44      	ldr	r2, [pc, #272]	@ (80012bc <HAL_GPIO_Init+0x2b4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d007      	beq.n	80011c0 <HAL_GPIO_Init+0x1b8>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a43      	ldr	r2, [pc, #268]	@ (80012c0 <HAL_GPIO_Init+0x2b8>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d101      	bne.n	80011bc <HAL_GPIO_Init+0x1b4>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e004      	b.n	80011c6 <HAL_GPIO_Init+0x1be>
 80011bc:	2307      	movs	r3, #7
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_Init+0x1be>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <HAL_GPIO_Init+0x1be>
 80011c4:	2300      	movs	r3, #0
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	f002 0203 	and.w	r2, r2, #3
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	4093      	lsls	r3, r2
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011d6:	4938      	ldr	r1, [pc, #224]	@ (80012b8 <HAL_GPIO_Init+0x2b0>)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3302      	adds	r3, #2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011e4:	4b37      	ldr	r3, [pc, #220]	@ (80012c4 <HAL_GPIO_Init+0x2bc>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001208:	4a2e      	ldr	r2, [pc, #184]	@ (80012c4 <HAL_GPIO_Init+0x2bc>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800120e:	4b2d      	ldr	r3, [pc, #180]	@ (80012c4 <HAL_GPIO_Init+0x2bc>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001232:	4a24      	ldr	r2, [pc, #144]	@ (80012c4 <HAL_GPIO_Init+0x2bc>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001238:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <HAL_GPIO_Init+0x2bc>)
 800123a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800123e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800125e:	4a19      	ldr	r2, [pc, #100]	@ (80012c4 <HAL_GPIO_Init+0x2bc>)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001266:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <HAL_GPIO_Init+0x2bc>)
 8001268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800126c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800128c:	4a0d      	ldr	r2, [pc, #52]	@ (80012c4 <HAL_GPIO_Init+0x2bc>)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	3301      	adds	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	fa22 f303 	lsr.w	r3, r2, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f47f aeb7 	bne.w	8001018 <HAL_GPIO_Init+0x10>
  }
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	371c      	adds	r7, #28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40010000 	.word	0x40010000
 80012bc:	48000400 	.word	0x48000400
 80012c0:	48000800 	.word	0x48000800
 80012c4:	58000800 	.word	0x58000800

080012c8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012cc:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a03      	ldr	r2, [pc, #12]	@ (80012e0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80012d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	58000400 	.word	0x58000400

080012e4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80012e8:	4b03      	ldr	r3, [pc, #12]	@ (80012f8 <HAL_PWREx_GetVoltageRange+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	58000400 	.word	0x58000400

080012fc <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001308:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800130c:	d101      	bne.n	8001312 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	58000400 	.word	0x58000400

08001320 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800132e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800134a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800135c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800136a:	d101      	bne.n	8001370 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800136c:	2301      	movs	r3, #1
 800136e:	e000      	b.n	8001372 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800137e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800138c:	6013      	str	r3, [r2, #0]
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800139a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr

080013b2 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80013b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80013c4:	d101      	bne.n	80013ca <LL_RCC_HSE_IsReady+0x18>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <LL_RCC_HSE_IsReady+0x1a>
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80013d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80013f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800141a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800141e:	d101      	bne.n	8001424 <LL_RCC_HSI_IsReady+0x18>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <LL_RCC_HSI_IsReady+0x1a>
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	061b      	lsls	r3, r3, #24
 8001444:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800145a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800145e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b02      	cmp	r3, #2
 8001468:	d101      	bne.n	800146e <LL_RCC_LSE_IsReady+0x18>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <LL_RCC_LSE_IsReady+0x1a>
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800147c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001484:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800149c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014a8:	f023 0301 	bic.w	r3, r3, #1
 80014ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80014bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d101      	bne.n	80014d0 <LL_RCC_LSI_IsReady+0x18>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <LL_RCC_LSI_IsReady+0x1a>
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80014de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6013      	str	r3, [r2, #0]
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80014fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	6013      	str	r3, [r2, #0]
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b02      	cmp	r3, #2
 8001522:	d101      	bne.n	8001528 <LL_RCC_MSI_IsReady+0x16>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <LL_RCC_MSI_IsReady+0x18>
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr

08001532 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	2b08      	cmp	r3, #8
 8001542:	d101      	bne.n	8001548 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr

08001552 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800156c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001574:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800159a:	4313      	orrs	r3, r2
 800159c:	604b      	str	r3, [r1, #4]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80015b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f023 0203 	bic.w	r2, r3, #3
 80015ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	608b      	str	r3, [r1, #8]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 030c 	and.w	r3, r3, #12
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80015ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	608b      	str	r3, [r1, #8]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001616:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800161a:	f023 020f 	bic.w	r2, r3, #15
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001626:	4313      	orrs	r3, r2
 8001628:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800163e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001648:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4313      	orrs	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800166e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4313      	orrs	r3, r2
 8001676:	608b      	str	r3, [r1, #8]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800169c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80016cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80016e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016f0:	6013      	str	r3, [r2, #0]
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80016fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001708:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800170c:	6013      	str	r3, [r2, #0]
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800171a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001724:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001728:	d101      	bne.n	800172e <LL_RCC_PLL_IsReady+0x18>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <LL_RCC_PLL_IsReady+0x1a>
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800173c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800176a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f003 0303 	and.w	r3, r3, #3
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr

08001792 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001796:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a4:	d101      	bne.n	80017aa <LL_RCC_IsActiveFlag_HPRE+0x18>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80017b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80017c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017c8:	d101      	bne.n	80017ce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80017dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80017ea:	d101      	bne.n	80017f0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr

080017fa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80017fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001808:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800180c:	d101      	bne.n	8001812 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e36f      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182e:	f7ff fece 	bl	80015ce <LL_RCC_GetSysClkSource>
 8001832:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001834:	f7ff ffa2 	bl	800177c <LL_RCC_PLL_GetMainSource>
 8001838:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0320 	and.w	r3, r3, #32
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 80c4 	beq.w	80019d0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <HAL_RCC_OscConfig+0x3e>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	2b0c      	cmp	r3, #12
 8001852:	d176      	bne.n	8001942 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d173      	bne.n	8001942 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e353      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800186a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_OscConfig+0x68>
 8001878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001882:	e006      	b.n	8001892 <HAL_RCC_OscConfig+0x76>
 8001884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001888:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800188c:	091b      	lsrs	r3, r3, #4
 800188e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001892:	4293      	cmp	r3, r2
 8001894:	d222      	bcs.n	80018dc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fd3c 	bl	8002318 <RCC_SetFlashLatencyFromMSIRange>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e331      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018b4:	f043 0308 	orr.w	r3, r3, #8
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fe53 	bl	8001580 <LL_RCC_MSI_SetCalibTrimming>
 80018da:	e021      	b.n	8001920 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018e6:	f043 0308 	orr.w	r3, r3, #8
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fe3a 	bl	8001580 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fd01 	bl	8002318 <RCC_SetFlashLatencyFromMSIRange>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e2f6      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001920:	f000 fcc2 	bl	80022a8 <HAL_RCC_GetHCLKFreq>
 8001924:	4603      	mov	r3, r0
 8001926:	4aa7      	ldr	r2, [pc, #668]	@ (8001bc4 <HAL_RCC_OscConfig+0x3a8>)
 8001928:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800192a:	4ba7      	ldr	r3, [pc, #668]	@ (8001bc8 <HAL_RCC_OscConfig+0x3ac>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fa0e 	bl	8000d50 <HAL_InitTick>
 8001934:	4603      	mov	r3, r0
 8001936:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001938:	7cfb      	ldrb	r3, [r7, #19]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d047      	beq.n	80019ce <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800193e:	7cfb      	ldrb	r3, [r7, #19]
 8001940:	e2e5      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d02c      	beq.n	80019a4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800194a:	f7ff fdc6 	bl	80014da <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800194e:	f7ff fa4b 	bl	8000de8 <HAL_GetTick>
 8001952:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001956:	f7ff fa47 	bl	8000de8 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e2d2      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001968:	f7ff fdd3 	bl	8001512 <LL_RCC_MSI_IsReady>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f1      	beq.n	8001956 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800197c:	f043 0308 	orr.w	r3, r3, #8
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001990:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001994:	4313      	orrs	r3, r2
 8001996:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fdef 	bl	8001580 <LL_RCC_MSI_SetCalibTrimming>
 80019a2:	e015      	b.n	80019d0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019a4:	f7ff fda7 	bl	80014f6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fa1e 	bl	8000de8 <HAL_GetTick>
 80019ac:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019b0:	f7ff fa1a 	bl	8000de8 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e2a5      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80019c2:	f7ff fda6 	bl	8001512 <LL_RCC_MSI_IsReady>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1f1      	bne.n	80019b0 <HAL_RCC_OscConfig+0x194>
 80019cc:	e000      	b.n	80019d0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80019ce:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d058      	beq.n	8001a8e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d005      	beq.n	80019ee <HAL_RCC_OscConfig+0x1d2>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	2b0c      	cmp	r3, #12
 80019e6:	d108      	bne.n	80019fa <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d105      	bne.n	80019fa <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d14b      	bne.n	8001a8e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e289      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80019fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a18:	d102      	bne.n	8001a20 <HAL_RCC_OscConfig+0x204>
 8001a1a:	f7ff fcae 	bl	800137a <LL_RCC_HSE_Enable>
 8001a1e:	e00d      	b.n	8001a3c <HAL_RCC_OscConfig+0x220>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001a28:	d104      	bne.n	8001a34 <HAL_RCC_OscConfig+0x218>
 8001a2a:	f7ff fc79 	bl	8001320 <LL_RCC_HSE_EnableTcxo>
 8001a2e:	f7ff fca4 	bl	800137a <LL_RCC_HSE_Enable>
 8001a32:	e003      	b.n	8001a3c <HAL_RCC_OscConfig+0x220>
 8001a34:	f7ff fcaf 	bl	8001396 <LL_RCC_HSE_Disable>
 8001a38:	f7ff fc80 	bl	800133c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d012      	beq.n	8001a6a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff f9d0 	bl	8000de8 <HAL_GetTick>
 8001a48:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff f9cc 	bl	8000de8 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	@ 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e257      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001a5e:	f7ff fca8 	bl	80013b2 <LL_RCC_HSE_IsReady>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f1      	beq.n	8001a4c <HAL_RCC_OscConfig+0x230>
 8001a68:	e011      	b.n	8001a8e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6a:	f7ff f9bd 	bl	8000de8 <HAL_GetTick>
 8001a6e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a72:	f7ff f9b9 	bl	8000de8 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b64      	cmp	r3, #100	@ 0x64
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e244      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a84:	f7ff fc95 	bl	80013b2 <LL_RCC_HSE_IsReady>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f1      	bne.n	8001a72 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d046      	beq.n	8001b28 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_OscConfig+0x290>
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d10e      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d10b      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e22a      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fcb6 	bl	800142e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ac2:	e031      	b.n	8001b28 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d019      	beq.n	8001b00 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001acc:	f7ff fc82 	bl	80013d4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f98a 	bl	8000de8 <HAL_GetTick>
 8001ad4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad8:	f7ff f986 	bl	8000de8 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e211      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001aea:	f7ff fc8f 	bl	800140c <LL_RCC_HSI_IsReady>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f1      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fc98 	bl	800142e <LL_RCC_HSI_SetCalibTrimming>
 8001afe:	e013      	b.n	8001b28 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b00:	f7ff fc76 	bl	80013f0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff f970 	bl	8000de8 <HAL_GetTick>
 8001b08:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7ff f96c 	bl	8000de8 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1f7      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001b1e:	f7ff fc75 	bl	800140c <LL_RCC_HSI_IsReady>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f1      	bne.n	8001b0c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d06e      	beq.n	8001c12 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d056      	beq.n	8001bea <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b44:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69da      	ldr	r2, [r3, #28]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d031      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d006      	beq.n	8001b6c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e1d0      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d013      	beq.n	8001b9e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001b76:	f7ff fc8f 	bl	8001498 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b7a:	f7ff f935 	bl	8000de8 <HAL_GetTick>
 8001b7e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b82:	f7ff f931 	bl	8000de8 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b11      	cmp	r3, #17
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e1bc      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001b94:	f7ff fc90 	bl	80014b8 <LL_RCC_LSI_IsReady>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f1      	bne.n	8001b82 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ba6:	f023 0210 	bic.w	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb8:	f7ff fc5e 	bl	8001478 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbc:	f7ff f914 	bl	8000de8 <HAL_GetTick>
 8001bc0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001bc2:	e00c      	b.n	8001bde <HAL_RCC_OscConfig+0x3c2>
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bcc:	f7ff f90c 	bl	8000de8 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b11      	cmp	r3, #17
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e197      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001bde:	f7ff fc6b 	bl	80014b8 <LL_RCC_LSI_IsReady>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f1      	beq.n	8001bcc <HAL_RCC_OscConfig+0x3b0>
 8001be8:	e013      	b.n	8001c12 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bea:	f7ff fc55 	bl	8001498 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bee:	f7ff f8fb 	bl	8000de8 <HAL_GetTick>
 8001bf2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf6:	f7ff f8f7 	bl	8000de8 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b11      	cmp	r3, #17
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e182      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001c08:	f7ff fc56 	bl	80014b8 <LL_RCC_LSI_IsReady>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f1      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80d8 	beq.w	8001dd0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001c20:	f7ff fb6c 	bl	80012fc <LL_PWR_IsEnabledBkUpAccess>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d113      	bne.n	8001c52 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001c2a:	f7ff fb4d 	bl	80012c8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f8db 	bl	8000de8 <HAL_GetTick>
 8001c32:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c36:	f7ff f8d7 	bl	8000de8 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e162      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001c48:	f7ff fb58 	bl	80012fc <LL_PWR_IsEnabledBkUpAccess>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f1      	beq.n	8001c36 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d07b      	beq.n	8001d52 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b85      	cmp	r3, #133	@ 0x85
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b05      	cmp	r3, #5
 8001c68:	d109      	bne.n	8001c7e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff f8b3 	bl	8000de8 <HAL_GetTick>
 8001c82:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001c98:	e00a      	b.n	8001cb0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9a:	f7ff f8a5 	bl	8000de8 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e12e      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001cb0:	f7ff fbd1 	bl	8001456 <LL_RCC_LSE_IsReady>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0ef      	beq.n	8001c9a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b81      	cmp	r3, #129	@ 0x81
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2b85      	cmp	r3, #133	@ 0x85
 8001cc8:	d121      	bne.n	8001d0e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7ff f88d 	bl	8000de8 <HAL_GetTick>
 8001cce:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7ff f87f 	bl	8000de8 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e108      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0ec      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001d0c:	e060      	b.n	8001dd0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff f86b 	bl	8000de8 <HAL_GetTick>
 8001d12:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7ff f85d 	bl	8000de8 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e0e6      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ec      	bne.n	8001d2a <HAL_RCC_OscConfig+0x50e>
 8001d50:	e03e      	b.n	8001dd0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d52:	f7ff f849 	bl	8000de8 <HAL_GetTick>
 8001d56:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d6c:	e00a      	b.n	8001d84 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6e:	f7ff f83b 	bl	8000de8 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e0c4      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1ec      	bne.n	8001d6e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d94:	f7ff f828 	bl	8000de8 <HAL_GetTick>
 8001d98:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001da2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db0:	f7ff f81a 	bl	8000de8 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e0a3      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001dc6:	f7ff fb46 	bl	8001456 <LL_RCC_LSE_IsReady>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1ef      	bne.n	8001db0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 8099 	beq.w	8001f0c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	2b0c      	cmp	r3, #12
 8001dde:	d06c      	beq.n	8001eba <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d14b      	bne.n	8001e80 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de8:	f7ff fc87 	bl	80016fa <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7fe fffc 	bl	8000de8 <HAL_GetTick>
 8001df0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df4:	f7fe fff8 	bl	8000de8 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b0a      	cmp	r3, #10
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e083      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001e06:	f7ff fc86 	bl	8001716 <LL_RCC_PLL_IsReady>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f1      	bne.n	8001df4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	4b40      	ldr	r3, [pc, #256]	@ (8001f18 <HAL_RCC_OscConfig+0x6fc>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e22:	4311      	orrs	r1, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e28:	0212      	lsls	r2, r2, #8
 8001e2a:	4311      	orrs	r1, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e30:	4311      	orrs	r1, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e36:	4311      	orrs	r1, r2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e46:	f7ff fc4a 	bl	80016de <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e58:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7fe ffc5 	bl	8000de8 <HAL_GetTick>
 8001e5e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e62:	f7fe ffc1 	bl	8000de8 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b0a      	cmp	r3, #10
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e04c      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001e74:	f7ff fc4f 	bl	8001716 <LL_RCC_PLL_IsReady>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f1      	beq.n	8001e62 <HAL_RCC_OscConfig+0x646>
 8001e7e:	e045      	b.n	8001f0c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e80:	f7ff fc3b 	bl	80016fa <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7fe ffb0 	bl	8000de8 <HAL_GetTick>
 8001e88:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7fe ffac 	bl	8000de8 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b0a      	cmp	r3, #10
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e037      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001e9e:	f7ff fc3a 	bl	8001716 <LL_RCC_PLL_IsReady>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f1      	bne.n	8001e8c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f1c <HAL_RCC_OscConfig+0x700>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60cb      	str	r3, [r1, #12]
 8001eb8:	e028      	b.n	8001f0c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e023      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	f003 0203 	and.w	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d115      	bne.n	8001f08 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d10e      	bne.n	8001f08 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d106      	bne.n	8001f08 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3720      	adds	r7, #32
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	11c1808c 	.word	0x11c1808c
 8001f1c:	eefefffc 	.word	0xeefefffc

08001f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e10f      	b.n	8002154 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f34:	4b89      	ldr	r3, [pc, #548]	@ (800215c <HAL_RCC_ClockConfig+0x23c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d91b      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b86      	ldr	r3, [pc, #536]	@ (800215c <HAL_RCC_ClockConfig+0x23c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 0207 	bic.w	r2, r3, #7
 8001f4a:	4984      	ldr	r1, [pc, #528]	@ (800215c <HAL_RCC_ClockConfig+0x23c>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f52:	f7fe ff49 	bl	8000de8 <HAL_GetTick>
 8001f56:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001f5a:	f7fe ff45 	bl	8000de8 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e0f3      	b.n	8002154 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6c:	4b7b      	ldr	r3, [pc, #492]	@ (800215c <HAL_RCC_ClockConfig+0x23c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d1ef      	bne.n	8001f5a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d016      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fb2a 	bl	80015e4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f90:	f7fe ff2a 	bl	8000de8 <HAL_GetTick>
 8001f94:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f98:	f7fe ff26 	bl	8000de8 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e0d4      	b.n	8002154 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001faa:	f7ff fbf2 	bl	8001792 <LL_RCC_IsActiveFlag_HPRE>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f1      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d016      	beq.n	8001fee <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fb20 	bl	800160a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fca:	f7fe ff0d 	bl	8000de8 <HAL_GetTick>
 8001fce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fd2:	f7fe ff09 	bl	8000de8 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e0b7      	b.n	8002154 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001fe4:	f7ff fbe6 	bl	80017b4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f1      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d016      	beq.n	8002028 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fb19 	bl	8001636 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002004:	f7fe fef0 	bl	8000de8 <HAL_GetTick>
 8002008:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800200c:	f7fe feec 	bl	8000de8 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e09a      	b.n	8002154 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800201e:	f7ff fbdb 	bl	80017d8 <LL_RCC_IsActiveFlag_PPRE1>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f1      	beq.n	800200c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d017      	beq.n	8002064 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fb0e 	bl	800165c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002040:	f7fe fed2 	bl	8000de8 <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002048:	f7fe fece 	bl	8000de8 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e07c      	b.n	8002154 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800205a:	f7ff fbce 	bl	80017fa <LL_RCC_IsActiveFlag_PPRE2>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f1      	beq.n	8002048 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d043      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d106      	bne.n	8002086 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002078:	f7ff f99b 	bl	80013b2 <LL_RCC_HSE_IsReady>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d11e      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e066      	b.n	8002154 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d106      	bne.n	800209c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800208e:	f7ff fb42 	bl	8001716 <LL_RCC_PLL_IsReady>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d113      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e05b      	b.n	8002154 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d106      	bne.n	80020b2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80020a4:	f7ff fa35 	bl	8001512 <LL_RCC_MSI_IsReady>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d108      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e050      	b.n	8002154 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80020b2:	f7ff f9ab 	bl	800140c <LL_RCC_HSI_IsReady>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e049      	b.n	8002154 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fa6f 	bl	80015a8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020ca:	f7fe fe8d 	bl	8000de8 <HAL_GetTick>
 80020ce:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d2:	f7fe fe89 	bl	8000de8 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e035      	b.n	8002154 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e8:	f7ff fa71 	bl	80015ce <LL_RCC_GetSysClkSource>
 80020ec:	4602      	mov	r2, r0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1ec      	bne.n	80020d2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f8:	4b18      	ldr	r3, [pc, #96]	@ (800215c <HAL_RCC_ClockConfig+0x23c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d21b      	bcs.n	800213e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <HAL_RCC_ClockConfig+0x23c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 0207 	bic.w	r2, r3, #7
 800210e:	4913      	ldr	r1, [pc, #76]	@ (800215c <HAL_RCC_ClockConfig+0x23c>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002116:	f7fe fe67 	bl	8000de8 <HAL_GetTick>
 800211a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211c:	e008      	b.n	8002130 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800211e:	f7fe fe63 	bl	8000de8 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e011      	b.n	8002154 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002130:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <HAL_RCC_ClockConfig+0x23c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d1ef      	bne.n	800211e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800213e:	f000 f8b3 	bl	80022a8 <HAL_RCC_GetHCLKFreq>
 8002142:	4603      	mov	r3, r0
 8002144:	4a06      	ldr	r2, [pc, #24]	@ (8002160 <HAL_RCC_ClockConfig+0x240>)
 8002146:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002148:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_RCC_ClockConfig+0x244>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fdff 	bl	8000d50 <HAL_InitTick>
 8002152:	4603      	mov	r3, r0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	58004000 	.word	0x58004000
 8002160:	20000000 	.word	0x20000000
 8002164:	20000004 	.word	0x20000004

08002168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002176:	f7ff fa2a 	bl	80015ce <LL_RCC_GetSysClkSource>
 800217a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800217c:	f7ff fafe 	bl	800177c <LL_RCC_PLL_GetMainSource>
 8002180:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x2c>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b0c      	cmp	r3, #12
 800218c:	d139      	bne.n	8002202 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d136      	bne.n	8002202 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002194:	f7ff f9cd 	bl	8001532 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d115      	bne.n	80021ca <HAL_RCC_GetSysClockFreq+0x62>
 800219e:	f7ff f9c8 	bl	8001532 <LL_RCC_MSI_IsEnabledRangeSelect>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_GetSysClockFreq+0x4e>
 80021a8:	f7ff f9d3 	bl	8001552 <LL_RCC_MSI_GetRange>
 80021ac:	4603      	mov	r3, r0
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	e005      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x5a>
 80021b6:	f7ff f9d7 	bl	8001568 <LL_RCC_MSI_GetRangeAfterStandby>
 80021ba:	4603      	mov	r3, r0
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	4a36      	ldr	r2, [pc, #216]	@ (800229c <HAL_RCC_GetSysClockFreq+0x134>)
 80021c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c8:	e014      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x8c>
 80021ca:	f7ff f9b2 	bl	8001532 <LL_RCC_MSI_IsEnabledRangeSelect>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d106      	bne.n	80021e2 <HAL_RCC_GetSysClockFreq+0x7a>
 80021d4:	f7ff f9bd 	bl	8001552 <LL_RCC_MSI_GetRange>
 80021d8:	4603      	mov	r3, r0
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	e005      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x86>
 80021e2:	f7ff f9c1 	bl	8001568 <LL_RCC_MSI_GetRangeAfterStandby>
 80021e6:	4603      	mov	r3, r0
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	4a2b      	ldr	r2, [pc, #172]	@ (800229c <HAL_RCC_GetSysClockFreq+0x134>)
 80021f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d115      	bne.n	8002228 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002200:	e012      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b04      	cmp	r3, #4
 8002206:	d102      	bne.n	800220e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002208:	4b25      	ldr	r3, [pc, #148]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	e00c      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b08      	cmp	r3, #8
 8002212:	d109      	bne.n	8002228 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002214:	f7ff f8a0 	bl	8001358 <LL_RCC_HSE_IsEnabledDiv2>
 8002218:	4603      	mov	r3, r0
 800221a:	2b01      	cmp	r3, #1
 800221c:	d102      	bne.n	8002224 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800221e:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	e001      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002224:	4b1f      	ldr	r3, [pc, #124]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002226:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002228:	f7ff f9d1 	bl	80015ce <LL_RCC_GetSysClkSource>
 800222c:	4603      	mov	r3, r0
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d12f      	bne.n	8002292 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002232:	f7ff faa3 	bl	800177c <LL_RCC_PLL_GetMainSource>
 8002236:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d003      	beq.n	8002246 <HAL_RCC_GetSysClockFreq+0xde>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d003      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0xe4>
 8002244:	e00d      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002246:	4b16      	ldr	r3, [pc, #88]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002248:	60fb      	str	r3, [r7, #12]
        break;
 800224a:	e00d      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800224c:	f7ff f884 	bl	8001358 <LL_RCC_HSE_IsEnabledDiv2>
 8002250:	4603      	mov	r3, r0
 8002252:	2b01      	cmp	r3, #1
 8002254:	d102      	bne.n	800225c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002256:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002258:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800225a:	e005      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800225c:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800225e:	60fb      	str	r3, [r7, #12]
        break;
 8002260:	e002      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	60fb      	str	r3, [r7, #12]
        break;
 8002266:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002268:	f7ff fa66 	bl	8001738 <LL_RCC_PLL_GetN>
 800226c:	4602      	mov	r2, r0
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	fb03 f402 	mul.w	r4, r3, r2
 8002274:	f7ff fa77 	bl	8001766 <LL_RCC_PLL_GetDivider>
 8002278:	4603      	mov	r3, r0
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	3301      	adds	r3, #1
 800227e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002282:	f7ff fa65 	bl	8001750 <LL_RCC_PLL_GetR>
 8002286:	4603      	mov	r3, r0
 8002288:	0f5b      	lsrs	r3, r3, #29
 800228a:	3301      	adds	r3, #1
 800228c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002290:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002292:	697b      	ldr	r3, [r7, #20]
}
 8002294:	4618      	mov	r0, r3
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	bd90      	pop	{r4, r7, pc}
 800229c:	08004640 	.word	0x08004640
 80022a0:	00f42400 	.word	0x00f42400
 80022a4:	01e84800 	.word	0x01e84800

080022a8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022a8:	b598      	push	{r3, r4, r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80022ac:	f7ff ff5c 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 80022b0:	4604      	mov	r4, r0
 80022b2:	f7ff f9e6 	bl	8001682 <LL_RCC_GetAHBPrescaler>
 80022b6:	4603      	mov	r3, r0
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	4a03      	ldr	r2, [pc, #12]	@ (80022cc <HAL_RCC_GetHCLKFreq+0x24>)
 80022c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	bd98      	pop	{r3, r4, r7, pc}
 80022cc:	080045e0 	.word	0x080045e0

080022d0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b598      	push	{r3, r4, r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80022d4:	f7ff ffe8 	bl	80022a8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4604      	mov	r4, r0
 80022da:	f7ff f9ea 	bl	80016b2 <LL_RCC_GetAPB1Prescaler>
 80022de:	4603      	mov	r3, r0
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	4a03      	ldr	r2, [pc, #12]	@ (80022f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	bd98      	pop	{r3, r4, r7, pc}
 80022f0:	08004620 	.word	0x08004620

080022f4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f4:	b598      	push	{r3, r4, r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80022f8:	f7ff ffd6 	bl	80022a8 <HAL_RCC_GetHCLKFreq>
 80022fc:	4604      	mov	r4, r0
 80022fe:	f7ff f9e3 	bl	80016c8 <LL_RCC_GetAPB2Prescaler>
 8002302:	4603      	mov	r3, r0
 8002304:	0adb      	lsrs	r3, r3, #11
 8002306:	4a03      	ldr	r2, [pc, #12]	@ (8002314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002310:	4618      	mov	r0, r3
 8002312:	bd98      	pop	{r3, r4, r7, pc}
 8002314:	08004620 	.word	0x08004620

08002318 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	4a10      	ldr	r2, [pc, #64]	@ (800236c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800232a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002330:	f7ff f9b2 	bl	8001698 <LL_RCC_GetAHB3Prescaler>
 8002334:	4603      	mov	r3, r0
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	4a0c      	ldr	r2, [pc, #48]	@ (8002370 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	fbb2 f3f3 	udiv	r3, r2, r3
 8002348:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	4a09      	ldr	r2, [pc, #36]	@ (8002374 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0c9c      	lsrs	r4, r3, #18
 8002354:	f7fe ffc6 	bl	80012e4 <HAL_PWREx_GetVoltageRange>
 8002358:	4603      	mov	r3, r0
 800235a:	4619      	mov	r1, r3
 800235c:	4620      	mov	r0, r4
 800235e:	f000 f80b 	bl	8002378 <RCC_SetFlashLatency>
 8002362:	4603      	mov	r3, r0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	bd90      	pop	{r4, r7, pc}
 800236c:	08004640 	.word	0x08004640
 8002370:	080045e0 	.word	0x080045e0
 8002374:	431bde83 	.word	0x431bde83

08002378 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08e      	sub	sp, #56	@ 0x38
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002382:	4a3a      	ldr	r2, [pc, #232]	@ (800246c <RCC_SetFlashLatency+0xf4>)
 8002384:	f107 0320 	add.w	r3, r7, #32
 8002388:	e892 0003 	ldmia.w	r2, {r0, r1}
 800238c:	6018      	str	r0, [r3, #0]
 800238e:	3304      	adds	r3, #4
 8002390:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002392:	4a37      	ldr	r2, [pc, #220]	@ (8002470 <RCC_SetFlashLatency+0xf8>)
 8002394:	f107 0318 	add.w	r3, r7, #24
 8002398:	e892 0003 	ldmia.w	r2, {r0, r1}
 800239c:	6018      	str	r0, [r3, #0]
 800239e:	3304      	adds	r3, #4
 80023a0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80023a2:	4a34      	ldr	r2, [pc, #208]	@ (8002474 <RCC_SetFlashLatency+0xfc>)
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80023aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80023ae:	2300      	movs	r3, #0
 80023b0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023b8:	d11b      	bne.n	80023f2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80023be:	e014      	b.n	80023ea <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80023c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	3338      	adds	r3, #56	@ 0x38
 80023c6:	443b      	add	r3, r7
 80023c8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80023cc:	461a      	mov	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d807      	bhi.n	80023e4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80023d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	3338      	adds	r3, #56	@ 0x38
 80023da:	443b      	add	r3, r7
 80023dc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80023e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80023e2:	e021      	b.n	8002428 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80023e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e6:	3301      	adds	r3, #1
 80023e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80023ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d9e7      	bls.n	80023c0 <RCC_SetFlashLatency+0x48>
 80023f0:	e01a      	b.n	8002428 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023f6:	e014      	b.n	8002422 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80023f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	3338      	adds	r3, #56	@ 0x38
 80023fe:	443b      	add	r3, r7
 8002400:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002404:	461a      	mov	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4293      	cmp	r3, r2
 800240a:	d807      	bhi.n	800241c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800240c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	3338      	adds	r3, #56	@ 0x38
 8002412:	443b      	add	r3, r7
 8002414:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002418:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800241a:	e005      	b.n	8002428 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800241c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800241e:	3301      	adds	r3, #1
 8002420:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002424:	2b02      	cmp	r3, #2
 8002426:	d9e7      	bls.n	80023f8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002428:	4b13      	ldr	r3, [pc, #76]	@ (8002478 <RCC_SetFlashLatency+0x100>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f023 0207 	bic.w	r2, r3, #7
 8002430:	4911      	ldr	r1, [pc, #68]	@ (8002478 <RCC_SetFlashLatency+0x100>)
 8002432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002438:	f7fe fcd6 	bl	8000de8 <HAL_GetTick>
 800243c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800243e:	e008      	b.n	8002452 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002440:	f7fe fcd2 	bl	8000de8 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e007      	b.n	8002462 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002452:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <RCC_SetFlashLatency+0x100>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800245c:	429a      	cmp	r2, r3
 800245e:	d1ef      	bne.n	8002440 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3738      	adds	r7, #56	@ 0x38
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	080045c4 	.word	0x080045c4
 8002470:	080045cc 	.word	0x080045cc
 8002474:	080045d4 	.word	0x080045d4
 8002478:	58004000 	.word	0x58004000

0800247c <LL_RCC_LSE_IsReady>:
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b02      	cmp	r3, #2
 800248e:	d101      	bne.n	8002494 <LL_RCC_LSE_IsReady+0x18>
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <LL_RCC_LSE_IsReady+0x1a>
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <LL_RCC_SetUSARTClockSource>:
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80024a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	0c1b      	lsrs	r3, r3, #16
 80024b2:	43db      	mvns	r3, r3
 80024b4:	401a      	ands	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <LL_RCC_SetI2SClockSource>:
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80024d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <LL_RCC_SetLPUARTClockSource>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002508:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800250c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <LL_RCC_SetI2CClockSource>:
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800252a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800252e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800253a:	43db      	mvns	r3, r3
 800253c:	401a      	ands	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002546:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr

0800255a <LL_RCC_SetLPTIMClockSource>:
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002566:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0c1b      	lsrs	r3, r3, #16
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	43db      	mvns	r3, r3
 8002572:	401a      	ands	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	041b      	lsls	r3, r3, #16
 8002578:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <LL_RCC_SetRNGClockSource>:
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80025a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <LL_RCC_SetADCClockSource>:
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80025be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80025ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <LL_RCC_SetRTCClockSource>:
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80025e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr

0800260a <LL_RCC_GetRTCClockSource>:
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800260e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <LL_RCC_ForceBackupDomainReset>:
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002636:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002646:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002656:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
	...

08002664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002670:	2300      	movs	r3, #0
 8002672:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002674:	2300      	movs	r3, #0
 8002676:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d058      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002684:	f7fe fe20 	bl	80012c8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002688:	f7fe fbae 	bl	8000de8 <HAL_GetTick>
 800268c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800268e:	e009      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002690:	f7fe fbaa 	bl	8000de8 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d902      	bls.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	74fb      	strb	r3, [r7, #19]
        break;
 80026a2:	e006      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80026a4:	4b7b      	ldr	r3, [pc, #492]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026b0:	d1ee      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80026b2:	7cfb      	ldrb	r3, [r7, #19]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d13c      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80026b8:	f7ff ffa7 	bl	800260a <LL_RCC_GetRTCClockSource>
 80026bc:	4602      	mov	r2, r0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d00f      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026d2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026d4:	f7ff ffa5 	bl	8002622 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026d8:	f7ff ffb3 	bl	8002642 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d014      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe fb7a 	bl	8000de8 <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80026f6:	e00b      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f8:	f7fe fb76 	bl	8000de8 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d902      	bls.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	74fb      	strb	r3, [r7, #19]
            break;
 800270e:	e004      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002710:	f7ff feb4 	bl	800247c <LL_RCC_LSE_IsReady>
 8002714:	4603      	mov	r3, r0
 8002716:	2b01      	cmp	r3, #1
 8002718:	d1ee      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800271a:	7cfb      	ldrb	r3, [r7, #19]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d105      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff5b 	bl	80025e0 <LL_RCC_SetRTCClockSource>
 800272a:	e004      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	74bb      	strb	r3, [r7, #18]
 8002730:	e001      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002732:	7cfb      	ldrb	r3, [r7, #19]
 8002734:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d004      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fea9 	bl	800249e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d004      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fe9e 	bl	800249e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d004      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fec0 	bl	80024f8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002780:	2b00      	cmp	r3, #0
 8002782:	d004      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fee6 	bl	800255a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002796:	2b00      	cmp	r3, #0
 8002798:	d004      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fedb 	bl	800255a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d004      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fed0 	bl	800255a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d004      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fea9 	bl	8002522 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d004      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fe9e 	bl	8002522 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fe93 	bl	8002522 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	d011      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fe5e 	bl	80024ce <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800281a:	d107      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800281c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800282a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d010      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fea5 	bl	800258c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	2b00      	cmp	r3, #0
 8002848:	d107      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800284a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002854:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002858:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d011      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fea3 	bl	80025b6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002878:	d107      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800287a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002888:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800288a:	7cbb      	ldrb	r3, [r7, #18]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	58000400 	.word	0x58000400

08002898 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80028a0:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80028a8:	4904      	ldr	r1, [pc, #16]	@ (80028bc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	608b      	str	r3, [r1, #8]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	58000400 	.word	0x58000400

080028c0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80028c4:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ca:	4a04      	ldr	r2, [pc, #16]	@ (80028dc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80028cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	58000400 	.word	0x58000400

080028e0 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80028e4:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ea:	4a04      	ldr	r2, [pc, #16]	@ (80028fc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80028ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80028f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	58000400 	.word	0x58000400

08002900 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8002904:	4b03      	ldr	r3, [pc, #12]	@ (8002914 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8002906:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800290a:	619a      	str	r2, [r3, #24]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	58000400 	.word	0x58000400

08002918 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800291c:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b02      	cmp	r3, #2
 8002926:	d101      	bne.n	800292c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	58000400 	.word	0x58000400

0800293c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8002940:	4b06      	ldr	r3, [pc, #24]	@ (800295c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b04      	cmp	r3, #4
 800294a:	d101      	bne.n	8002950 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	58000400 	.word	0x58000400

08002960 <LL_RCC_RF_DisableReset>:
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002968:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800296c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002970:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002974:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <LL_RCC_IsRFUnderReset>:
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8002984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800298c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002990:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002994:	d101      	bne.n	800299a <LL_RCC_IsRFUnderReset+0x1a>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <LL_RCC_IsRFUnderReset+0x1c>
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80029ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80029b2:	4905      	ldr	r1, [pc, #20]	@ (80029c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	58000800 	.word	0x58000800

080029cc <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d103      	bne.n	80029e2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
    return status;
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	e052      	b.n	8002a88 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	799b      	ldrb	r3, [r3, #6]
 80029ea:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80029ec:	7bbb      	ldrb	r3, [r7, #14]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_SUBGHZ_Init+0x2c>
 80029f2:	7bbb      	ldrb	r3, [r7, #14]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d109      	bne.n	8002a0c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe f8a2 	bl	8000b48 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8002a04:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002a08:	f7ff ffcc 	bl	80029a4 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8002a0c:	7bbb      	ldrb	r3, [r7, #14]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d126      	bne.n	8002a60 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2202      	movs	r2, #2
 8002a16:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8002a18:	f7ff ffa2 	bl	8002960 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002a90 <HAL_SUBGHZ_Init+0xc4>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	0cdb      	lsrs	r3, r3, #19
 8002a2a:	2264      	movs	r2, #100	@ 0x64
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d105      	bne.n	8002a44 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	609a      	str	r2, [r3, #8]
        break;
 8002a42:	e007      	b.n	8002a54 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8002a4a:	f7ff ff99 	bl	8002980 <LL_RCC_IsRFUnderReset>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1ee      	bne.n	8002a32 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002a54:	f7ff ff34 	bl	80028c0 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8002a58:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002a5c:	f7ff ff1c 	bl	8002898 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8002a60:	f7ff ff4e 	bl	8002900 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 f97a 	bl	8002d68 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	719a      	strb	r2, [r3, #6]

  return status;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000000 	.word	0x20000000

08002a94 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	817b      	strh	r3, [r7, #10]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	799b      	ldrb	r3, [r3, #6]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d14a      	bne.n	8002b48 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	795b      	ldrb	r3, [r3, #5]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_SUBGHZ_WriteRegisters+0x2a>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e045      	b.n	8002b4a <HAL_SUBGHZ_WriteRegisters+0xb6>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fa1a 	bl	8002f04 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002ad0:	f7ff ff06 	bl	80028e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8002ad4:	210d      	movs	r1, #13
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f966 	bl	8002da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8002adc:	897b      	ldrh	r3, [r7, #10]
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f95e 	bl	8002da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8002aec:	897b      	ldrh	r3, [r7, #10]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	4619      	mov	r1, r3
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f958 	bl	8002da8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002af8:	2300      	movs	r3, #0
 8002afa:	82bb      	strh	r3, [r7, #20]
 8002afc:	e00a      	b.n	8002b14 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002afe:	8abb      	ldrh	r3, [r7, #20]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	4413      	add	r3, r2
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	4619      	mov	r1, r3
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f94d 	bl	8002da8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002b0e:	8abb      	ldrh	r3, [r7, #20]
 8002b10:	3301      	adds	r3, #1
 8002b12:	82bb      	strh	r3, [r7, #20]
 8002b14:	8aba      	ldrh	r2, [r7, #20]
 8002b16:	893b      	ldrh	r3, [r7, #8]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d3f0      	bcc.n	8002afe <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002b1c:	f7ff fed0 	bl	80028c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fa13 	bl	8002f4c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	75fb      	strb	r3, [r7, #23]
 8002b32:	e001      	b.n	8002b38 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	715a      	strb	r2, [r3, #5]

    return status;
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	e000      	b.n	8002b4a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	460b      	mov	r3, r1
 8002b60:	72fb      	strb	r3, [r7, #11]
 8002b62:	4613      	mov	r3, r2
 8002b64:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	799b      	ldrb	r3, [r3, #6]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d14a      	bne.n	8002c06 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	795b      	ldrb	r3, [r3, #5]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e045      	b.n	8002c08 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f9be 	bl	8002f04 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8002b88:	7afb      	ldrb	r3, [r7, #11]
 8002b8a:	2b84      	cmp	r3, #132	@ 0x84
 8002b8c:	d002      	beq.n	8002b94 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8002b8e:	7afb      	ldrb	r3, [r7, #11]
 8002b90:	2b94      	cmp	r3, #148	@ 0x94
 8002b92:	d103      	bne.n	8002b9c <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	711a      	strb	r2, [r3, #4]
 8002b9a:	e002      	b.n	8002ba2 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002ba2:	f7ff fe9d 	bl	80028e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002ba6:	7afb      	ldrb	r3, [r7, #11]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f8fc 	bl	8002da8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	82bb      	strh	r3, [r7, #20]
 8002bb4:	e00a      	b.n	8002bcc <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002bb6:	8abb      	ldrh	r3, [r7, #20]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	4413      	add	r3, r2
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f8f1 	bl	8002da8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002bc6:	8abb      	ldrh	r3, [r7, #20]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	82bb      	strh	r3, [r7, #20]
 8002bcc:	8aba      	ldrh	r2, [r7, #20]
 8002bce:	893b      	ldrh	r3, [r7, #8]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d3f0      	bcc.n	8002bb6 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002bd4:	f7ff fe74 	bl	80028c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8002bd8:	7afb      	ldrb	r3, [r7, #11]
 8002bda:	2b84      	cmp	r3, #132	@ 0x84
 8002bdc:	d002      	beq.n	8002be4 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 f9b4 	bl	8002f4c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d002      	beq.n	8002bf2 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	75fb      	strb	r3, [r7, #23]
 8002bf0:	e001      	b.n	8002bf6 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	715a      	strb	r2, [r3, #5]

    return status;
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	e000      	b.n	8002c08 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002c06:	2302      	movs	r3, #2
  }
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	72fb      	strb	r3, [r7, #11]
 8002c20:	4613      	mov	r3, r2
 8002c22:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	799b      	ldrb	r3, [r3, #6]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d13d      	bne.n	8002cae <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	795b      	ldrb	r3, [r3, #5]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e038      	b.n	8002cb0 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 f95d 	bl	8002f04 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002c4a:	f7ff fe49 	bl	80028e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002c4e:	7afb      	ldrb	r3, [r7, #11]
 8002c50:	4619      	mov	r1, r3
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f8a8 	bl	8002da8 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8002c58:	2100      	movs	r1, #0
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f8a4 	bl	8002da8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002c60:	2300      	movs	r3, #0
 8002c62:	82fb      	strh	r3, [r7, #22]
 8002c64:	e009      	b.n	8002c7a <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002c66:	69b9      	ldr	r1, [r7, #24]
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f8f3 	bl	8002e54 <SUBGHZSPI_Receive>
      pData++;
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	3301      	adds	r3, #1
 8002c72:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002c74:	8afb      	ldrh	r3, [r7, #22]
 8002c76:	3301      	adds	r3, #1
 8002c78:	82fb      	strh	r3, [r7, #22]
 8002c7a:	8afa      	ldrh	r2, [r7, #22]
 8002c7c:	893b      	ldrh	r3, [r7, #8]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d3f1      	bcc.n	8002c66 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002c82:	f7ff fe1d 	bl	80028c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f960 	bl	8002f4c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	77fb      	strb	r3, [r7, #31]
 8002c98:	e001      	b.n	8002c9e <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	715a      	strb	r2, [r3, #5]

    return status;
 8002caa:	7ffb      	ldrb	r3, [r7, #31]
 8002cac:	e000      	b.n	8002cb0 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
  }
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	72fb      	strb	r3, [r7, #11]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	799b      	ldrb	r3, [r3, #6]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d141      	bne.n	8002d5e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	795b      	ldrb	r3, [r3, #5]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e03c      	b.n	8002d60 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f909 	bl	8002f04 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002cf2:	f7ff fdf5 	bl	80028e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8002cf6:	211e      	movs	r1, #30
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f855 	bl	8002da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8002cfe:	7afb      	ldrb	r3, [r7, #11]
 8002d00:	4619      	mov	r1, r3
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f850 	bl	8002da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8002d08:	2100      	movs	r1, #0
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f84c 	bl	8002da8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	82fb      	strh	r3, [r7, #22]
 8002d14:	e009      	b.n	8002d2a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002d16:	69b9      	ldr	r1, [r7, #24]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f89b 	bl	8002e54 <SUBGHZSPI_Receive>
      pData++;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	3301      	adds	r3, #1
 8002d22:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002d24:	8afb      	ldrh	r3, [r7, #22]
 8002d26:	3301      	adds	r3, #1
 8002d28:	82fb      	strh	r3, [r7, #22]
 8002d2a:	8afa      	ldrh	r2, [r7, #22]
 8002d2c:	893b      	ldrh	r3, [r7, #8]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d3f1      	bcc.n	8002d16 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002d32:	f7ff fdc5 	bl	80028c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f908 	bl	8002f4c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	77fb      	strb	r3, [r7, #31]
 8002d48:	e001      	b.n	8002d4e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	715a      	strb	r2, [r3, #5]

    return status;
 8002d5a:	7ffb      	ldrb	r3, [r7, #31]
 8002d5c:	e000      	b.n	8002d60 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002d5e:	2302      	movs	r3, #2
  }
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002d70:	4b0c      	ldr	r3, [pc, #48]	@ (8002da4 <SUBGHZSPI_Init+0x3c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0b      	ldr	r2, [pc, #44]	@ (8002da4 <SUBGHZSPI_Init+0x3c>)
 8002d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d7a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8002d7c:	4a09      	ldr	r2, [pc, #36]	@ (8002da4 <SUBGHZSPI_Init+0x3c>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8002d84:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8002d86:	4b07      	ldr	r3, [pc, #28]	@ (8002da4 <SUBGHZSPI_Init+0x3c>)
 8002d88:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8002d8c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002d8e:	4b05      	ldr	r3, [pc, #20]	@ (8002da4 <SUBGHZSPI_Init+0x3c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a04      	ldr	r2, [pc, #16]	@ (8002da4 <SUBGHZSPI_Init+0x3c>)
 8002d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d98:	6013      	str	r3, [r2, #0]
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr
 8002da4:	58010000 	.word	0x58010000

08002da8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002db8:	4b23      	ldr	r3, [pc, #140]	@ (8002e48 <SUBGHZSPI_Transmit+0xa0>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	0cdb      	lsrs	r3, r3, #19
 8002dc6:	2264      	movs	r2, #100	@ 0x64
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d105      	bne.n	8002de0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	609a      	str	r2, [r3, #8]
      break;
 8002dde:	e008      	b.n	8002df2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8002de6:	4b19      	ldr	r3, [pc, #100]	@ (8002e4c <SUBGHZSPI_Transmit+0xa4>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d1ed      	bne.n	8002dce <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8002df2:	4b17      	ldr	r3, [pc, #92]	@ (8002e50 <SUBGHZSPI_Transmit+0xa8>)
 8002df4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002dfc:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <SUBGHZSPI_Transmit+0xa0>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	0cdb      	lsrs	r3, r3, #19
 8002e0a:	2264      	movs	r2, #100	@ 0x64
 8002e0c:	fb02 f303 	mul.w	r3, r2, r3
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	609a      	str	r2, [r3, #8]
      break;
 8002e22:	e008      	b.n	8002e36 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8002e2a:	4b08      	ldr	r3, [pc, #32]	@ (8002e4c <SUBGHZSPI_Transmit+0xa4>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d1ed      	bne.n	8002e12 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8002e36:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <SUBGHZSPI_Transmit+0xa4>)
 8002e38:	68db      	ldr	r3, [r3, #12]

  return status;
 8002e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	371c      	adds	r7, #28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	58010000 	.word	0x58010000
 8002e50:	5801000c 	.word	0x5801000c

08002e54 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002e62:	4b25      	ldr	r3, [pc, #148]	@ (8002ef8 <SUBGHZSPI_Receive+0xa4>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	0cdb      	lsrs	r3, r3, #19
 8002e70:	2264      	movs	r2, #100	@ 0x64
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d105      	bne.n	8002e8a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	609a      	str	r2, [r3, #8]
      break;
 8002e88:	e008      	b.n	8002e9c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8002e90:	4b1a      	ldr	r3, [pc, #104]	@ (8002efc <SUBGHZSPI_Receive+0xa8>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d1ed      	bne.n	8002e78 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8002e9c:	4b18      	ldr	r3, [pc, #96]	@ (8002f00 <SUBGHZSPI_Receive+0xac>)
 8002e9e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	22ff      	movs	r2, #255	@ 0xff
 8002ea4:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002ea6:	4b14      	ldr	r3, [pc, #80]	@ (8002ef8 <SUBGHZSPI_Receive+0xa4>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	0cdb      	lsrs	r3, r3, #19
 8002eb4:	2264      	movs	r2, #100	@ 0x64
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d105      	bne.n	8002ece <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	609a      	str	r2, [r3, #8]
      break;
 8002ecc:	e008      	b.n	8002ee0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8002ed4:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <SUBGHZSPI_Receive+0xa8>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d1ed      	bne.n	8002ebc <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8002ee0:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <SUBGHZSPI_Receive+0xa8>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	701a      	strb	r2, [r3, #0]

  return status;
 8002eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	58010000 	.word	0x58010000
 8002f00:	5801000c 	.word	0x5801000c

08002f04 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	791b      	ldrb	r3, [r3, #4]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d111      	bne.n	8002f38 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8002f14:	4b0c      	ldr	r3, [pc, #48]	@ (8002f48 <SUBGHZ_CheckDeviceReady+0x44>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4413      	add	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	0c1b      	lsrs	r3, r3, #16
 8002f22:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002f24:	f7ff fcdc 	bl	80028e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f9      	bne.n	8002f28 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002f34:	f7ff fcc4 	bl	80028c0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f807 	bl	8002f4c <SUBGHZ_WaitOnBusy>
 8002f3e:	4603      	mov	r3, r0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20000000 	.word	0x20000000

08002f4c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8002f58:	4b12      	ldr	r3, [pc, #72]	@ (8002fa4 <SUBGHZ_WaitOnBusy+0x58>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	4413      	add	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	0d1b      	lsrs	r3, r3, #20
 8002f66:	2264      	movs	r2, #100	@ 0x64
 8002f68:	fb02 f303 	mul.w	r3, r2, r3
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8002f6e:	f7ff fce5 	bl	800293c <LL_PWR_IsActiveFlag_RFBUSYMS>
 8002f72:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d105      	bne.n	8002f86 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2202      	movs	r2, #2
 8002f82:	609a      	str	r2, [r3, #8]
      break;
 8002f84:	e009      	b.n	8002f9a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8002f8c:	f7ff fcc4 	bl	8002918 <LL_PWR_IsActiveFlag_RFBUSYS>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d0e9      	beq.n	8002f6e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000000 	.word	0x20000000

08002fa8 <LL_RCC_GetUSARTClockSource>:
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002fb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	401a      	ands	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	041b      	lsls	r3, r3, #16
 8002fc0:	4313      	orrs	r3, r2
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <LL_RCC_GetLPUARTClockSource>:
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002fd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4013      	ands	r3, r2
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e042      	b.n	8003082 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fd fda6 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2224      	movs	r2, #36	@ 0x24
 8003018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f8b3 	bl	8003198 <UART_SetConfig>
 8003032:	4603      	mov	r3, r0
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e022      	b.n	8003082 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 fb1b 	bl	8003680 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003058:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003068:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0201 	orr.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fba1 	bl	80037c2 <UART_CheckIdleState>
 8003080:	4603      	mov	r3, r0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b08a      	sub	sp, #40	@ 0x28
 800308e:	af02      	add	r7, sp, #8
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	4613      	mov	r3, r2
 8003098:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d173      	bne.n	800318c <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_UART_Transmit+0x26>
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e06c      	b.n	800318e <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2221      	movs	r2, #33	@ 0x21
 80030c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030c4:	f7fd fe90 	bl	8000de8 <HAL_GetTick>
 80030c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	88fa      	ldrh	r2, [r7, #6]
 80030ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	88fa      	ldrh	r2, [r7, #6]
 80030d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030e2:	d108      	bne.n	80030f6 <HAL_UART_Transmit+0x6c>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d104      	bne.n	80030f6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	e003      	b.n	80030fe <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030fe:	e02c      	b.n	800315a <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2200      	movs	r2, #0
 8003108:	2180      	movs	r1, #128	@ 0x80
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fba7 	bl	800385e <UART_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e039      	b.n	800318e <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10b      	bne.n	8003138 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800312e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	3302      	adds	r3, #2
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	e007      	b.n	8003148 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	781a      	ldrb	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3301      	adds	r3, #1
 8003146:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1cc      	bne.n	8003100 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2200      	movs	r2, #0
 800316e:	2140      	movs	r1, #64	@ 0x40
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 fb74 	bl	800385e <UART_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e006      	b.n	800318e <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	e000      	b.n	800318e <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800318c:	2302      	movs	r3, #2
  }
}
 800318e:	4618      	mov	r0, r3
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800319c:	b08c      	sub	sp, #48	@ 0x30
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	4313      	orrs	r3, r2
 80031be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4b94      	ldr	r3, [pc, #592]	@ (8003418 <UART_SetConfig+0x280>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a89      	ldr	r2, [pc, #548]	@ (800341c <UART_SetConfig+0x284>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d004      	beq.n	8003204 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003200:	4313      	orrs	r3, r2
 8003202:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800320e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003218:	430b      	orrs	r3, r1
 800321a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003222:	f023 010f 	bic.w	r1, r3, #15
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a7a      	ldr	r2, [pc, #488]	@ (8003420 <UART_SetConfig+0x288>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d127      	bne.n	800328c <UART_SetConfig+0xf4>
 800323c:	2003      	movs	r0, #3
 800323e:	f7ff feb3 	bl	8002fa8 <LL_RCC_GetUSARTClockSource>
 8003242:	4603      	mov	r3, r0
 8003244:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8003248:	2b03      	cmp	r3, #3
 800324a:	d81b      	bhi.n	8003284 <UART_SetConfig+0xec>
 800324c:	a201      	add	r2, pc, #4	@ (adr r2, 8003254 <UART_SetConfig+0xbc>)
 800324e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003252:	bf00      	nop
 8003254:	08003265 	.word	0x08003265
 8003258:	08003275 	.word	0x08003275
 800325c:	0800326d 	.word	0x0800326d
 8003260:	0800327d 	.word	0x0800327d
 8003264:	2301      	movs	r3, #1
 8003266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800326a:	e080      	b.n	800336e <UART_SetConfig+0x1d6>
 800326c:	2302      	movs	r3, #2
 800326e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003272:	e07c      	b.n	800336e <UART_SetConfig+0x1d6>
 8003274:	2304      	movs	r3, #4
 8003276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800327a:	e078      	b.n	800336e <UART_SetConfig+0x1d6>
 800327c:	2308      	movs	r3, #8
 800327e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003282:	e074      	b.n	800336e <UART_SetConfig+0x1d6>
 8003284:	2310      	movs	r3, #16
 8003286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800328a:	e070      	b.n	800336e <UART_SetConfig+0x1d6>
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a64      	ldr	r2, [pc, #400]	@ (8003424 <UART_SetConfig+0x28c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d138      	bne.n	8003308 <UART_SetConfig+0x170>
 8003296:	200c      	movs	r0, #12
 8003298:	f7ff fe86 	bl	8002fa8 <LL_RCC_GetUSARTClockSource>
 800329c:	4603      	mov	r3, r0
 800329e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d82c      	bhi.n	8003300 <UART_SetConfig+0x168>
 80032a6:	a201      	add	r2, pc, #4	@ (adr r2, 80032ac <UART_SetConfig+0x114>)
 80032a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ac:	080032e1 	.word	0x080032e1
 80032b0:	08003301 	.word	0x08003301
 80032b4:	08003301 	.word	0x08003301
 80032b8:	08003301 	.word	0x08003301
 80032bc:	080032f1 	.word	0x080032f1
 80032c0:	08003301 	.word	0x08003301
 80032c4:	08003301 	.word	0x08003301
 80032c8:	08003301 	.word	0x08003301
 80032cc:	080032e9 	.word	0x080032e9
 80032d0:	08003301 	.word	0x08003301
 80032d4:	08003301 	.word	0x08003301
 80032d8:	08003301 	.word	0x08003301
 80032dc:	080032f9 	.word	0x080032f9
 80032e0:	2300      	movs	r3, #0
 80032e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032e6:	e042      	b.n	800336e <UART_SetConfig+0x1d6>
 80032e8:	2302      	movs	r3, #2
 80032ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ee:	e03e      	b.n	800336e <UART_SetConfig+0x1d6>
 80032f0:	2304      	movs	r3, #4
 80032f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032f6:	e03a      	b.n	800336e <UART_SetConfig+0x1d6>
 80032f8:	2308      	movs	r3, #8
 80032fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032fe:	e036      	b.n	800336e <UART_SetConfig+0x1d6>
 8003300:	2310      	movs	r3, #16
 8003302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003306:	e032      	b.n	800336e <UART_SetConfig+0x1d6>
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a43      	ldr	r2, [pc, #268]	@ (800341c <UART_SetConfig+0x284>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d12a      	bne.n	8003368 <UART_SetConfig+0x1d0>
 8003312:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003316:	f7ff fe59 	bl	8002fcc <LL_RCC_GetLPUARTClockSource>
 800331a:	4603      	mov	r3, r0
 800331c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003320:	d01a      	beq.n	8003358 <UART_SetConfig+0x1c0>
 8003322:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003326:	d81b      	bhi.n	8003360 <UART_SetConfig+0x1c8>
 8003328:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800332c:	d00c      	beq.n	8003348 <UART_SetConfig+0x1b0>
 800332e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003332:	d815      	bhi.n	8003360 <UART_SetConfig+0x1c8>
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <UART_SetConfig+0x1a8>
 8003338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800333c:	d008      	beq.n	8003350 <UART_SetConfig+0x1b8>
 800333e:	e00f      	b.n	8003360 <UART_SetConfig+0x1c8>
 8003340:	2300      	movs	r3, #0
 8003342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003346:	e012      	b.n	800336e <UART_SetConfig+0x1d6>
 8003348:	2302      	movs	r3, #2
 800334a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800334e:	e00e      	b.n	800336e <UART_SetConfig+0x1d6>
 8003350:	2304      	movs	r3, #4
 8003352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003356:	e00a      	b.n	800336e <UART_SetConfig+0x1d6>
 8003358:	2308      	movs	r3, #8
 800335a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800335e:	e006      	b.n	800336e <UART_SetConfig+0x1d6>
 8003360:	2310      	movs	r3, #16
 8003362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003366:	e002      	b.n	800336e <UART_SetConfig+0x1d6>
 8003368:	2310      	movs	r3, #16
 800336a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a2a      	ldr	r2, [pc, #168]	@ (800341c <UART_SetConfig+0x284>)
 8003374:	4293      	cmp	r3, r2
 8003376:	f040 80a4 	bne.w	80034c2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800337a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800337e:	2b08      	cmp	r3, #8
 8003380:	d823      	bhi.n	80033ca <UART_SetConfig+0x232>
 8003382:	a201      	add	r2, pc, #4	@ (adr r2, 8003388 <UART_SetConfig+0x1f0>)
 8003384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003388:	080033ad 	.word	0x080033ad
 800338c:	080033cb 	.word	0x080033cb
 8003390:	080033b5 	.word	0x080033b5
 8003394:	080033cb 	.word	0x080033cb
 8003398:	080033bb 	.word	0x080033bb
 800339c:	080033cb 	.word	0x080033cb
 80033a0:	080033cb 	.word	0x080033cb
 80033a4:	080033cb 	.word	0x080033cb
 80033a8:	080033c3 	.word	0x080033c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ac:	f7fe ff90 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80033b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033b2:	e010      	b.n	80033d6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003428 <UART_SetConfig+0x290>)
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033b8:	e00d      	b.n	80033d6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ba:	f7fe fed5 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 80033be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033c0:	e009      	b.n	80033d6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033c8:	e005      	b.n	80033d6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80033d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 8137 	beq.w	800364c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	4a12      	ldr	r2, [pc, #72]	@ (800342c <UART_SetConfig+0x294>)
 80033e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033e8:	461a      	mov	r2, r3
 80033ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d305      	bcc.n	800340e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	429a      	cmp	r2, r3
 800340c:	d910      	bls.n	8003430 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003414:	e11a      	b.n	800364c <UART_SetConfig+0x4b4>
 8003416:	bf00      	nop
 8003418:	cfff69f3 	.word	0xcfff69f3
 800341c:	40008000 	.word	0x40008000
 8003420:	40013800 	.word	0x40013800
 8003424:	40004400 	.word	0x40004400
 8003428:	00f42400 	.word	0x00f42400
 800342c:	08004680 	.word	0x08004680
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003432:	2200      	movs	r2, #0
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	60fa      	str	r2, [r7, #12]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	4a8e      	ldr	r2, [pc, #568]	@ (8003678 <UART_SetConfig+0x4e0>)
 800343e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003442:	b29b      	uxth	r3, r3
 8003444:	2200      	movs	r2, #0
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800344e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003452:	f7fc fee5 	bl	8000220 <__aeabi_uldivmod>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4610      	mov	r0, r2
 800345c:	4619      	mov	r1, r3
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	020b      	lsls	r3, r1, #8
 8003468:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800346c:	0202      	lsls	r2, r0, #8
 800346e:	6979      	ldr	r1, [r7, #20]
 8003470:	6849      	ldr	r1, [r1, #4]
 8003472:	0849      	lsrs	r1, r1, #1
 8003474:	2000      	movs	r0, #0
 8003476:	460c      	mov	r4, r1
 8003478:	4605      	mov	r5, r0
 800347a:	eb12 0804 	adds.w	r8, r2, r4
 800347e:	eb43 0905 	adc.w	r9, r3, r5
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	469a      	mov	sl, r3
 800348a:	4693      	mov	fp, r2
 800348c:	4652      	mov	r2, sl
 800348e:	465b      	mov	r3, fp
 8003490:	4640      	mov	r0, r8
 8003492:	4649      	mov	r1, r9
 8003494:	f7fc fec4 	bl	8000220 <__aeabi_uldivmod>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4613      	mov	r3, r2
 800349e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034a6:	d308      	bcc.n	80034ba <UART_SetConfig+0x322>
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034ae:	d204      	bcs.n	80034ba <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6a3a      	ldr	r2, [r7, #32]
 80034b6:	60da      	str	r2, [r3, #12]
 80034b8:	e0c8      	b.n	800364c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80034c0:	e0c4      	b.n	800364c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034ca:	d167      	bne.n	800359c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80034cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d828      	bhi.n	8003526 <UART_SetConfig+0x38e>
 80034d4:	a201      	add	r2, pc, #4	@ (adr r2, 80034dc <UART_SetConfig+0x344>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	08003501 	.word	0x08003501
 80034e0:	08003509 	.word	0x08003509
 80034e4:	08003511 	.word	0x08003511
 80034e8:	08003527 	.word	0x08003527
 80034ec:	08003517 	.word	0x08003517
 80034f0:	08003527 	.word	0x08003527
 80034f4:	08003527 	.word	0x08003527
 80034f8:	08003527 	.word	0x08003527
 80034fc:	0800351f 	.word	0x0800351f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003500:	f7fe fee6 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003504:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003506:	e014      	b.n	8003532 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003508:	f7fe fef4 	bl	80022f4 <HAL_RCC_GetPCLK2Freq>
 800350c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800350e:	e010      	b.n	8003532 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003510:	4b5a      	ldr	r3, [pc, #360]	@ (800367c <UART_SetConfig+0x4e4>)
 8003512:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003514:	e00d      	b.n	8003532 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003516:	f7fe fe27 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 800351a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800351c:	e009      	b.n	8003532 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800351e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003522:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003524:	e005      	b.n	8003532 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003530:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 8089 	beq.w	800364c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	4a4e      	ldr	r2, [pc, #312]	@ (8003678 <UART_SetConfig+0x4e0>)
 8003540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003544:	461a      	mov	r2, r3
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	fbb3 f3f2 	udiv	r3, r3, r2
 800354c:	005a      	lsls	r2, r3, #1
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	441a      	add	r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	fbb2 f3f3 	udiv	r3, r2, r3
 800355e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	2b0f      	cmp	r3, #15
 8003564:	d916      	bls.n	8003594 <UART_SetConfig+0x3fc>
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800356c:	d212      	bcs.n	8003594 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	b29b      	uxth	r3, r3
 8003572:	f023 030f 	bic.w	r3, r3, #15
 8003576:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	b29b      	uxth	r3, r3
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	b29a      	uxth	r2, r3
 8003584:	8bfb      	ldrh	r3, [r7, #30]
 8003586:	4313      	orrs	r3, r2
 8003588:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	8bfa      	ldrh	r2, [r7, #30]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	e05b      	b.n	800364c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800359a:	e057      	b.n	800364c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800359c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d828      	bhi.n	80035f6 <UART_SetConfig+0x45e>
 80035a4:	a201      	add	r2, pc, #4	@ (adr r2, 80035ac <UART_SetConfig+0x414>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	080035d1 	.word	0x080035d1
 80035b0:	080035d9 	.word	0x080035d9
 80035b4:	080035e1 	.word	0x080035e1
 80035b8:	080035f7 	.word	0x080035f7
 80035bc:	080035e7 	.word	0x080035e7
 80035c0:	080035f7 	.word	0x080035f7
 80035c4:	080035f7 	.word	0x080035f7
 80035c8:	080035f7 	.word	0x080035f7
 80035cc:	080035ef 	.word	0x080035ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035d0:	f7fe fe7e 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80035d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035d6:	e014      	b.n	8003602 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035d8:	f7fe fe8c 	bl	80022f4 <HAL_RCC_GetPCLK2Freq>
 80035dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035de:	e010      	b.n	8003602 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e0:	4b26      	ldr	r3, [pc, #152]	@ (800367c <UART_SetConfig+0x4e4>)
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035e4:	e00d      	b.n	8003602 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035e6:	f7fe fdbf 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 80035ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035ec:	e009      	b.n	8003602 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035f4:	e005      	b.n	8003602 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003600:	bf00      	nop
    }

    if (pclk != 0U)
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	2b00      	cmp	r3, #0
 8003606:	d021      	beq.n	800364c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	4a1a      	ldr	r2, [pc, #104]	@ (8003678 <UART_SetConfig+0x4e0>)
 800360e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003612:	461a      	mov	r2, r3
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	fbb3 f2f2 	udiv	r2, r3, r2
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	441a      	add	r2, r3
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	fbb2 f3f3 	udiv	r3, r2, r3
 800362a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	2b0f      	cmp	r3, #15
 8003630:	d909      	bls.n	8003646 <UART_SetConfig+0x4ae>
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003638:	d205      	bcs.n	8003646 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	b29a      	uxth	r2, r3
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60da      	str	r2, [r3, #12]
 8003644:	e002      	b.n	800364c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2201      	movs	r2, #1
 8003650:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2201      	movs	r2, #1
 8003658:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2200      	movs	r2, #0
 8003660:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2200      	movs	r2, #0
 8003666:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003668:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800366c:	4618      	mov	r0, r3
 800366e:	3730      	adds	r7, #48	@ 0x30
 8003670:	46bd      	mov	sp, r7
 8003672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003676:	bf00      	nop
 8003678:	08004680 	.word	0x08004680
 800367c:	00f42400 	.word	0x00f42400

08003680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01a      	beq.n	8003796 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800377e:	d10a      	bne.n	8003796 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	605a      	str	r2, [r3, #4]
  }
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b086      	sub	sp, #24
 80037c6:	af02      	add	r7, sp, #8
 80037c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037d2:	f7fd fb09 	bl	8000de8 <HAL_GetTick>
 80037d6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d10e      	bne.n	8003804 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f832 	bl	800385e <UART_WaitOnFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e028      	b.n	8003856 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b04      	cmp	r3, #4
 8003810:	d10e      	bne.n	8003830 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003812:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f81c 	bl	800385e <UART_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e012      	b.n	8003856 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b09c      	sub	sp, #112	@ 0x70
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386e:	e0a9      	b.n	80039c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003870:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003876:	f000 80a5 	beq.w	80039c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387a:	f7fd fab5 	bl	8000de8 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <UART_WaitOnFlagUntilTimeout+0x32>
 800388a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800388c:	2b00      	cmp	r3, #0
 800388e:	d140      	bne.n	8003912 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800389e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038a0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80038a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80038b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80038bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e6      	bne.n	8003890 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3308      	adds	r3, #8
 80038c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3308      	adds	r3, #8
 80038e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80038e2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80038e4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80038e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80038f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1e5      	bne.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2220      	movs	r2, #32
 8003902:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e069      	b.n	80039e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d051      	beq.n	80039c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800392a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800392e:	d149      	bne.n	80039c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003938:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003942:	e853 3f00 	ldrex	r3, [r3]
 8003946:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800394e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003958:	637b      	str	r3, [r7, #52]	@ 0x34
 800395a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800395e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e6      	bne.n	800393a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3308      	adds	r3, #8
 8003972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	613b      	str	r3, [r7, #16]
   return(result);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3308      	adds	r3, #8
 800398a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800398c:	623a      	str	r2, [r7, #32]
 800398e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	69f9      	ldr	r1, [r7, #28]
 8003992:	6a3a      	ldr	r2, [r7, #32]
 8003994:	e841 2300 	strex	r3, r2, [r1]
 8003998:	61bb      	str	r3, [r7, #24]
   return(result);
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e5      	bne.n	800396c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e010      	b.n	80039e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69da      	ldr	r2, [r3, #28]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	4013      	ands	r3, r2
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	429a      	cmp	r2, r3
 80039e0:	f43f af46 	beq.w	8003870 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3770      	adds	r7, #112	@ 0x70
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e027      	b.n	8003a54 <HAL_UARTEx_DisableFifoMode+0x66>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2224      	movs	r2, #36	@ 0x24
 8003a10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0201 	bic.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003a32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr

08003a5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e02d      	b.n	8003ad2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2224      	movs	r2, #36	@ 0x24
 8003a82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0201 	bic.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f850 	bl	8003b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e02d      	b.n	8003b4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2224      	movs	r2, #36	@ 0x24
 8003afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0201 	bic.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f812 	bl	8003b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d108      	bne.n	8003b7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b78:	e031      	b.n	8003bde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b7a:	2308      	movs	r3, #8
 8003b7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b7e:	2308      	movs	r3, #8
 8003b80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	0e5b      	lsrs	r3, r3, #25
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	0f5b      	lsrs	r3, r3, #29
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ba2:	7bbb      	ldrb	r3, [r7, #14]
 8003ba4:	7b3a      	ldrb	r2, [r7, #12]
 8003ba6:	4910      	ldr	r1, [pc, #64]	@ (8003be8 <UARTEx_SetNbDataToProcess+0x90>)
 8003ba8:	5c8a      	ldrb	r2, [r1, r2]
 8003baa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003bae:	7b3a      	ldrb	r2, [r7, #12]
 8003bb0:	490e      	ldr	r1, [pc, #56]	@ (8003bec <UARTEx_SetNbDataToProcess+0x94>)
 8003bb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003bb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	7b7a      	ldrb	r2, [r7, #13]
 8003bc4:	4908      	ldr	r1, [pc, #32]	@ (8003be8 <UARTEx_SetNbDataToProcess+0x90>)
 8003bc6:	5c8a      	ldrb	r2, [r1, r2]
 8003bc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003bcc:	7b7a      	ldrb	r2, [r7, #13]
 8003bce:	4907      	ldr	r1, [pc, #28]	@ (8003bec <UARTEx_SetNbDataToProcess+0x94>)
 8003bd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr
 8003be8:	08004698 	.word	0x08004698
 8003bec:	080046a0 	.word	0x080046a0

08003bf0 <siprintf>:
 8003bf0:	b40e      	push	{r1, r2, r3}
 8003bf2:	b500      	push	{lr}
 8003bf4:	b09c      	sub	sp, #112	@ 0x70
 8003bf6:	ab1d      	add	r3, sp, #116	@ 0x74
 8003bf8:	9002      	str	r0, [sp, #8]
 8003bfa:	9006      	str	r0, [sp, #24]
 8003bfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c00:	4809      	ldr	r0, [pc, #36]	@ (8003c28 <siprintf+0x38>)
 8003c02:	9107      	str	r1, [sp, #28]
 8003c04:	9104      	str	r1, [sp, #16]
 8003c06:	4909      	ldr	r1, [pc, #36]	@ (8003c2c <siprintf+0x3c>)
 8003c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c0c:	9105      	str	r1, [sp, #20]
 8003c0e:	6800      	ldr	r0, [r0, #0]
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	a902      	add	r1, sp, #8
 8003c14:	f000 f994 	bl	8003f40 <_svfiprintf_r>
 8003c18:	9b02      	ldr	r3, [sp, #8]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	b01c      	add	sp, #112	@ 0x70
 8003c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c24:	b003      	add	sp, #12
 8003c26:	4770      	bx	lr
 8003c28:	2000000c 	.word	0x2000000c
 8003c2c:	ffff0208 	.word	0xffff0208

08003c30 <memset>:
 8003c30:	4402      	add	r2, r0
 8003c32:	4603      	mov	r3, r0
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d100      	bne.n	8003c3a <memset+0xa>
 8003c38:	4770      	bx	lr
 8003c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c3e:	e7f9      	b.n	8003c34 <memset+0x4>

08003c40 <__errno>:
 8003c40:	4b01      	ldr	r3, [pc, #4]	@ (8003c48 <__errno+0x8>)
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	2000000c 	.word	0x2000000c

08003c4c <__libc_init_array>:
 8003c4c:	b570      	push	{r4, r5, r6, lr}
 8003c4e:	4d0d      	ldr	r5, [pc, #52]	@ (8003c84 <__libc_init_array+0x38>)
 8003c50:	4c0d      	ldr	r4, [pc, #52]	@ (8003c88 <__libc_init_array+0x3c>)
 8003c52:	1b64      	subs	r4, r4, r5
 8003c54:	10a4      	asrs	r4, r4, #2
 8003c56:	2600      	movs	r6, #0
 8003c58:	42a6      	cmp	r6, r4
 8003c5a:	d109      	bne.n	8003c70 <__libc_init_array+0x24>
 8003c5c:	4d0b      	ldr	r5, [pc, #44]	@ (8003c8c <__libc_init_array+0x40>)
 8003c5e:	4c0c      	ldr	r4, [pc, #48]	@ (8003c90 <__libc_init_array+0x44>)
 8003c60:	f000 fc66 	bl	8004530 <_init>
 8003c64:	1b64      	subs	r4, r4, r5
 8003c66:	10a4      	asrs	r4, r4, #2
 8003c68:	2600      	movs	r6, #0
 8003c6a:	42a6      	cmp	r6, r4
 8003c6c:	d105      	bne.n	8003c7a <__libc_init_array+0x2e>
 8003c6e:	bd70      	pop	{r4, r5, r6, pc}
 8003c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c74:	4798      	blx	r3
 8003c76:	3601      	adds	r6, #1
 8003c78:	e7ee      	b.n	8003c58 <__libc_init_array+0xc>
 8003c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c7e:	4798      	blx	r3
 8003c80:	3601      	adds	r6, #1
 8003c82:	e7f2      	b.n	8003c6a <__libc_init_array+0x1e>
 8003c84:	080046e4 	.word	0x080046e4
 8003c88:	080046e4 	.word	0x080046e4
 8003c8c:	080046e4 	.word	0x080046e4
 8003c90:	080046e8 	.word	0x080046e8

08003c94 <__retarget_lock_acquire_recursive>:
 8003c94:	4770      	bx	lr

08003c96 <__retarget_lock_release_recursive>:
 8003c96:	4770      	bx	lr

08003c98 <_free_r>:
 8003c98:	b538      	push	{r3, r4, r5, lr}
 8003c9a:	4605      	mov	r5, r0
 8003c9c:	2900      	cmp	r1, #0
 8003c9e:	d041      	beq.n	8003d24 <_free_r+0x8c>
 8003ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca4:	1f0c      	subs	r4, r1, #4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	bfb8      	it	lt
 8003caa:	18e4      	addlt	r4, r4, r3
 8003cac:	f000 f8e0 	bl	8003e70 <__malloc_lock>
 8003cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d28 <_free_r+0x90>)
 8003cb2:	6813      	ldr	r3, [r2, #0]
 8003cb4:	b933      	cbnz	r3, 8003cc4 <_free_r+0x2c>
 8003cb6:	6063      	str	r3, [r4, #4]
 8003cb8:	6014      	str	r4, [r2, #0]
 8003cba:	4628      	mov	r0, r5
 8003cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cc0:	f000 b8dc 	b.w	8003e7c <__malloc_unlock>
 8003cc4:	42a3      	cmp	r3, r4
 8003cc6:	d908      	bls.n	8003cda <_free_r+0x42>
 8003cc8:	6820      	ldr	r0, [r4, #0]
 8003cca:	1821      	adds	r1, r4, r0
 8003ccc:	428b      	cmp	r3, r1
 8003cce:	bf01      	itttt	eq
 8003cd0:	6819      	ldreq	r1, [r3, #0]
 8003cd2:	685b      	ldreq	r3, [r3, #4]
 8003cd4:	1809      	addeq	r1, r1, r0
 8003cd6:	6021      	streq	r1, [r4, #0]
 8003cd8:	e7ed      	b.n	8003cb6 <_free_r+0x1e>
 8003cda:	461a      	mov	r2, r3
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	b10b      	cbz	r3, 8003ce4 <_free_r+0x4c>
 8003ce0:	42a3      	cmp	r3, r4
 8003ce2:	d9fa      	bls.n	8003cda <_free_r+0x42>
 8003ce4:	6811      	ldr	r1, [r2, #0]
 8003ce6:	1850      	adds	r0, r2, r1
 8003ce8:	42a0      	cmp	r0, r4
 8003cea:	d10b      	bne.n	8003d04 <_free_r+0x6c>
 8003cec:	6820      	ldr	r0, [r4, #0]
 8003cee:	4401      	add	r1, r0
 8003cf0:	1850      	adds	r0, r2, r1
 8003cf2:	4283      	cmp	r3, r0
 8003cf4:	6011      	str	r1, [r2, #0]
 8003cf6:	d1e0      	bne.n	8003cba <_free_r+0x22>
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	6053      	str	r3, [r2, #4]
 8003cfe:	4408      	add	r0, r1
 8003d00:	6010      	str	r0, [r2, #0]
 8003d02:	e7da      	b.n	8003cba <_free_r+0x22>
 8003d04:	d902      	bls.n	8003d0c <_free_r+0x74>
 8003d06:	230c      	movs	r3, #12
 8003d08:	602b      	str	r3, [r5, #0]
 8003d0a:	e7d6      	b.n	8003cba <_free_r+0x22>
 8003d0c:	6820      	ldr	r0, [r4, #0]
 8003d0e:	1821      	adds	r1, r4, r0
 8003d10:	428b      	cmp	r3, r1
 8003d12:	bf04      	itt	eq
 8003d14:	6819      	ldreq	r1, [r3, #0]
 8003d16:	685b      	ldreq	r3, [r3, #4]
 8003d18:	6063      	str	r3, [r4, #4]
 8003d1a:	bf04      	itt	eq
 8003d1c:	1809      	addeq	r1, r1, r0
 8003d1e:	6021      	streq	r1, [r4, #0]
 8003d20:	6054      	str	r4, [r2, #4]
 8003d22:	e7ca      	b.n	8003cba <_free_r+0x22>
 8003d24:	bd38      	pop	{r3, r4, r5, pc}
 8003d26:	bf00      	nop
 8003d28:	200002f4 	.word	0x200002f4

08003d2c <sbrk_aligned>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	4e0f      	ldr	r6, [pc, #60]	@ (8003d6c <sbrk_aligned+0x40>)
 8003d30:	460c      	mov	r4, r1
 8003d32:	6831      	ldr	r1, [r6, #0]
 8003d34:	4605      	mov	r5, r0
 8003d36:	b911      	cbnz	r1, 8003d3e <sbrk_aligned+0x12>
 8003d38:	f000 fba6 	bl	8004488 <_sbrk_r>
 8003d3c:	6030      	str	r0, [r6, #0]
 8003d3e:	4621      	mov	r1, r4
 8003d40:	4628      	mov	r0, r5
 8003d42:	f000 fba1 	bl	8004488 <_sbrk_r>
 8003d46:	1c43      	adds	r3, r0, #1
 8003d48:	d103      	bne.n	8003d52 <sbrk_aligned+0x26>
 8003d4a:	f04f 34ff 	mov.w	r4, #4294967295
 8003d4e:	4620      	mov	r0, r4
 8003d50:	bd70      	pop	{r4, r5, r6, pc}
 8003d52:	1cc4      	adds	r4, r0, #3
 8003d54:	f024 0403 	bic.w	r4, r4, #3
 8003d58:	42a0      	cmp	r0, r4
 8003d5a:	d0f8      	beq.n	8003d4e <sbrk_aligned+0x22>
 8003d5c:	1a21      	subs	r1, r4, r0
 8003d5e:	4628      	mov	r0, r5
 8003d60:	f000 fb92 	bl	8004488 <_sbrk_r>
 8003d64:	3001      	adds	r0, #1
 8003d66:	d1f2      	bne.n	8003d4e <sbrk_aligned+0x22>
 8003d68:	e7ef      	b.n	8003d4a <sbrk_aligned+0x1e>
 8003d6a:	bf00      	nop
 8003d6c:	200002f0 	.word	0x200002f0

08003d70 <_malloc_r>:
 8003d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d74:	1ccd      	adds	r5, r1, #3
 8003d76:	f025 0503 	bic.w	r5, r5, #3
 8003d7a:	3508      	adds	r5, #8
 8003d7c:	2d0c      	cmp	r5, #12
 8003d7e:	bf38      	it	cc
 8003d80:	250c      	movcc	r5, #12
 8003d82:	2d00      	cmp	r5, #0
 8003d84:	4606      	mov	r6, r0
 8003d86:	db01      	blt.n	8003d8c <_malloc_r+0x1c>
 8003d88:	42a9      	cmp	r1, r5
 8003d8a:	d904      	bls.n	8003d96 <_malloc_r+0x26>
 8003d8c:	230c      	movs	r3, #12
 8003d8e:	6033      	str	r3, [r6, #0]
 8003d90:	2000      	movs	r0, #0
 8003d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e6c <_malloc_r+0xfc>
 8003d9a:	f000 f869 	bl	8003e70 <__malloc_lock>
 8003d9e:	f8d8 3000 	ldr.w	r3, [r8]
 8003da2:	461c      	mov	r4, r3
 8003da4:	bb44      	cbnz	r4, 8003df8 <_malloc_r+0x88>
 8003da6:	4629      	mov	r1, r5
 8003da8:	4630      	mov	r0, r6
 8003daa:	f7ff ffbf 	bl	8003d2c <sbrk_aligned>
 8003dae:	1c43      	adds	r3, r0, #1
 8003db0:	4604      	mov	r4, r0
 8003db2:	d158      	bne.n	8003e66 <_malloc_r+0xf6>
 8003db4:	f8d8 4000 	ldr.w	r4, [r8]
 8003db8:	4627      	mov	r7, r4
 8003dba:	2f00      	cmp	r7, #0
 8003dbc:	d143      	bne.n	8003e46 <_malloc_r+0xd6>
 8003dbe:	2c00      	cmp	r4, #0
 8003dc0:	d04b      	beq.n	8003e5a <_malloc_r+0xea>
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	4639      	mov	r1, r7
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	eb04 0903 	add.w	r9, r4, r3
 8003dcc:	f000 fb5c 	bl	8004488 <_sbrk_r>
 8003dd0:	4581      	cmp	r9, r0
 8003dd2:	d142      	bne.n	8003e5a <_malloc_r+0xea>
 8003dd4:	6821      	ldr	r1, [r4, #0]
 8003dd6:	1a6d      	subs	r5, r5, r1
 8003dd8:	4629      	mov	r1, r5
 8003dda:	4630      	mov	r0, r6
 8003ddc:	f7ff ffa6 	bl	8003d2c <sbrk_aligned>
 8003de0:	3001      	adds	r0, #1
 8003de2:	d03a      	beq.n	8003e5a <_malloc_r+0xea>
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	442b      	add	r3, r5
 8003de8:	6023      	str	r3, [r4, #0]
 8003dea:	f8d8 3000 	ldr.w	r3, [r8]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	bb62      	cbnz	r2, 8003e4c <_malloc_r+0xdc>
 8003df2:	f8c8 7000 	str.w	r7, [r8]
 8003df6:	e00f      	b.n	8003e18 <_malloc_r+0xa8>
 8003df8:	6822      	ldr	r2, [r4, #0]
 8003dfa:	1b52      	subs	r2, r2, r5
 8003dfc:	d420      	bmi.n	8003e40 <_malloc_r+0xd0>
 8003dfe:	2a0b      	cmp	r2, #11
 8003e00:	d917      	bls.n	8003e32 <_malloc_r+0xc2>
 8003e02:	1961      	adds	r1, r4, r5
 8003e04:	42a3      	cmp	r3, r4
 8003e06:	6025      	str	r5, [r4, #0]
 8003e08:	bf18      	it	ne
 8003e0a:	6059      	strne	r1, [r3, #4]
 8003e0c:	6863      	ldr	r3, [r4, #4]
 8003e0e:	bf08      	it	eq
 8003e10:	f8c8 1000 	streq.w	r1, [r8]
 8003e14:	5162      	str	r2, [r4, r5]
 8003e16:	604b      	str	r3, [r1, #4]
 8003e18:	4630      	mov	r0, r6
 8003e1a:	f000 f82f 	bl	8003e7c <__malloc_unlock>
 8003e1e:	f104 000b 	add.w	r0, r4, #11
 8003e22:	1d23      	adds	r3, r4, #4
 8003e24:	f020 0007 	bic.w	r0, r0, #7
 8003e28:	1ac2      	subs	r2, r0, r3
 8003e2a:	bf1c      	itt	ne
 8003e2c:	1a1b      	subne	r3, r3, r0
 8003e2e:	50a3      	strne	r3, [r4, r2]
 8003e30:	e7af      	b.n	8003d92 <_malloc_r+0x22>
 8003e32:	6862      	ldr	r2, [r4, #4]
 8003e34:	42a3      	cmp	r3, r4
 8003e36:	bf0c      	ite	eq
 8003e38:	f8c8 2000 	streq.w	r2, [r8]
 8003e3c:	605a      	strne	r2, [r3, #4]
 8003e3e:	e7eb      	b.n	8003e18 <_malloc_r+0xa8>
 8003e40:	4623      	mov	r3, r4
 8003e42:	6864      	ldr	r4, [r4, #4]
 8003e44:	e7ae      	b.n	8003da4 <_malloc_r+0x34>
 8003e46:	463c      	mov	r4, r7
 8003e48:	687f      	ldr	r7, [r7, #4]
 8003e4a:	e7b6      	b.n	8003dba <_malloc_r+0x4a>
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	42a3      	cmp	r3, r4
 8003e52:	d1fb      	bne.n	8003e4c <_malloc_r+0xdc>
 8003e54:	2300      	movs	r3, #0
 8003e56:	6053      	str	r3, [r2, #4]
 8003e58:	e7de      	b.n	8003e18 <_malloc_r+0xa8>
 8003e5a:	230c      	movs	r3, #12
 8003e5c:	6033      	str	r3, [r6, #0]
 8003e5e:	4630      	mov	r0, r6
 8003e60:	f000 f80c 	bl	8003e7c <__malloc_unlock>
 8003e64:	e794      	b.n	8003d90 <_malloc_r+0x20>
 8003e66:	6005      	str	r5, [r0, #0]
 8003e68:	e7d6      	b.n	8003e18 <_malloc_r+0xa8>
 8003e6a:	bf00      	nop
 8003e6c:	200002f4 	.word	0x200002f4

08003e70 <__malloc_lock>:
 8003e70:	4801      	ldr	r0, [pc, #4]	@ (8003e78 <__malloc_lock+0x8>)
 8003e72:	f7ff bf0f 	b.w	8003c94 <__retarget_lock_acquire_recursive>
 8003e76:	bf00      	nop
 8003e78:	200002ec 	.word	0x200002ec

08003e7c <__malloc_unlock>:
 8003e7c:	4801      	ldr	r0, [pc, #4]	@ (8003e84 <__malloc_unlock+0x8>)
 8003e7e:	f7ff bf0a 	b.w	8003c96 <__retarget_lock_release_recursive>
 8003e82:	bf00      	nop
 8003e84:	200002ec 	.word	0x200002ec

08003e88 <__ssputs_r>:
 8003e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8c:	688e      	ldr	r6, [r1, #8]
 8003e8e:	461f      	mov	r7, r3
 8003e90:	42be      	cmp	r6, r7
 8003e92:	680b      	ldr	r3, [r1, #0]
 8003e94:	4682      	mov	sl, r0
 8003e96:	460c      	mov	r4, r1
 8003e98:	4690      	mov	r8, r2
 8003e9a:	d82d      	bhi.n	8003ef8 <__ssputs_r+0x70>
 8003e9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ea0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ea4:	d026      	beq.n	8003ef4 <__ssputs_r+0x6c>
 8003ea6:	6965      	ldr	r5, [r4, #20]
 8003ea8:	6909      	ldr	r1, [r1, #16]
 8003eaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003eae:	eba3 0901 	sub.w	r9, r3, r1
 8003eb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003eb6:	1c7b      	adds	r3, r7, #1
 8003eb8:	444b      	add	r3, r9
 8003eba:	106d      	asrs	r5, r5, #1
 8003ebc:	429d      	cmp	r5, r3
 8003ebe:	bf38      	it	cc
 8003ec0:	461d      	movcc	r5, r3
 8003ec2:	0553      	lsls	r3, r2, #21
 8003ec4:	d527      	bpl.n	8003f16 <__ssputs_r+0x8e>
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	f7ff ff52 	bl	8003d70 <_malloc_r>
 8003ecc:	4606      	mov	r6, r0
 8003ece:	b360      	cbz	r0, 8003f2a <__ssputs_r+0xa2>
 8003ed0:	6921      	ldr	r1, [r4, #16]
 8003ed2:	464a      	mov	r2, r9
 8003ed4:	f000 fae8 	bl	80044a8 <memcpy>
 8003ed8:	89a3      	ldrh	r3, [r4, #12]
 8003eda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ee2:	81a3      	strh	r3, [r4, #12]
 8003ee4:	6126      	str	r6, [r4, #16]
 8003ee6:	6165      	str	r5, [r4, #20]
 8003ee8:	444e      	add	r6, r9
 8003eea:	eba5 0509 	sub.w	r5, r5, r9
 8003eee:	6026      	str	r6, [r4, #0]
 8003ef0:	60a5      	str	r5, [r4, #8]
 8003ef2:	463e      	mov	r6, r7
 8003ef4:	42be      	cmp	r6, r7
 8003ef6:	d900      	bls.n	8003efa <__ssputs_r+0x72>
 8003ef8:	463e      	mov	r6, r7
 8003efa:	6820      	ldr	r0, [r4, #0]
 8003efc:	4632      	mov	r2, r6
 8003efe:	4641      	mov	r1, r8
 8003f00:	f000 faa8 	bl	8004454 <memmove>
 8003f04:	68a3      	ldr	r3, [r4, #8]
 8003f06:	1b9b      	subs	r3, r3, r6
 8003f08:	60a3      	str	r3, [r4, #8]
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	4433      	add	r3, r6
 8003f0e:	6023      	str	r3, [r4, #0]
 8003f10:	2000      	movs	r0, #0
 8003f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f16:	462a      	mov	r2, r5
 8003f18:	f000 fad4 	bl	80044c4 <_realloc_r>
 8003f1c:	4606      	mov	r6, r0
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d1e0      	bne.n	8003ee4 <__ssputs_r+0x5c>
 8003f22:	6921      	ldr	r1, [r4, #16]
 8003f24:	4650      	mov	r0, sl
 8003f26:	f7ff feb7 	bl	8003c98 <_free_r>
 8003f2a:	230c      	movs	r3, #12
 8003f2c:	f8ca 3000 	str.w	r3, [sl]
 8003f30:	89a3      	ldrh	r3, [r4, #12]
 8003f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f36:	81a3      	strh	r3, [r4, #12]
 8003f38:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3c:	e7e9      	b.n	8003f12 <__ssputs_r+0x8a>
	...

08003f40 <_svfiprintf_r>:
 8003f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f44:	4698      	mov	r8, r3
 8003f46:	898b      	ldrh	r3, [r1, #12]
 8003f48:	061b      	lsls	r3, r3, #24
 8003f4a:	b09d      	sub	sp, #116	@ 0x74
 8003f4c:	4607      	mov	r7, r0
 8003f4e:	460d      	mov	r5, r1
 8003f50:	4614      	mov	r4, r2
 8003f52:	d510      	bpl.n	8003f76 <_svfiprintf_r+0x36>
 8003f54:	690b      	ldr	r3, [r1, #16]
 8003f56:	b973      	cbnz	r3, 8003f76 <_svfiprintf_r+0x36>
 8003f58:	2140      	movs	r1, #64	@ 0x40
 8003f5a:	f7ff ff09 	bl	8003d70 <_malloc_r>
 8003f5e:	6028      	str	r0, [r5, #0]
 8003f60:	6128      	str	r0, [r5, #16]
 8003f62:	b930      	cbnz	r0, 8003f72 <_svfiprintf_r+0x32>
 8003f64:	230c      	movs	r3, #12
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6c:	b01d      	add	sp, #116	@ 0x74
 8003f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f72:	2340      	movs	r3, #64	@ 0x40
 8003f74:	616b      	str	r3, [r5, #20]
 8003f76:	2300      	movs	r3, #0
 8003f78:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f7a:	2320      	movs	r3, #32
 8003f7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f80:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f84:	2330      	movs	r3, #48	@ 0x30
 8003f86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004124 <_svfiprintf_r+0x1e4>
 8003f8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f8e:	f04f 0901 	mov.w	r9, #1
 8003f92:	4623      	mov	r3, r4
 8003f94:	469a      	mov	sl, r3
 8003f96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f9a:	b10a      	cbz	r2, 8003fa0 <_svfiprintf_r+0x60>
 8003f9c:	2a25      	cmp	r2, #37	@ 0x25
 8003f9e:	d1f9      	bne.n	8003f94 <_svfiprintf_r+0x54>
 8003fa0:	ebba 0b04 	subs.w	fp, sl, r4
 8003fa4:	d00b      	beq.n	8003fbe <_svfiprintf_r+0x7e>
 8003fa6:	465b      	mov	r3, fp
 8003fa8:	4622      	mov	r2, r4
 8003faa:	4629      	mov	r1, r5
 8003fac:	4638      	mov	r0, r7
 8003fae:	f7ff ff6b 	bl	8003e88 <__ssputs_r>
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	f000 80a7 	beq.w	8004106 <_svfiprintf_r+0x1c6>
 8003fb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fba:	445a      	add	r2, fp
 8003fbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8003fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 809f 	beq.w	8004106 <_svfiprintf_r+0x1c6>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f04f 32ff 	mov.w	r2, #4294967295
 8003fce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fd2:	f10a 0a01 	add.w	sl, sl, #1
 8003fd6:	9304      	str	r3, [sp, #16]
 8003fd8:	9307      	str	r3, [sp, #28]
 8003fda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003fde:	931a      	str	r3, [sp, #104]	@ 0x68
 8003fe0:	4654      	mov	r4, sl
 8003fe2:	2205      	movs	r2, #5
 8003fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fe8:	484e      	ldr	r0, [pc, #312]	@ (8004124 <_svfiprintf_r+0x1e4>)
 8003fea:	f7fc f8c9 	bl	8000180 <memchr>
 8003fee:	9a04      	ldr	r2, [sp, #16]
 8003ff0:	b9d8      	cbnz	r0, 800402a <_svfiprintf_r+0xea>
 8003ff2:	06d0      	lsls	r0, r2, #27
 8003ff4:	bf44      	itt	mi
 8003ff6:	2320      	movmi	r3, #32
 8003ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ffc:	0711      	lsls	r1, r2, #28
 8003ffe:	bf44      	itt	mi
 8004000:	232b      	movmi	r3, #43	@ 0x2b
 8004002:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004006:	f89a 3000 	ldrb.w	r3, [sl]
 800400a:	2b2a      	cmp	r3, #42	@ 0x2a
 800400c:	d015      	beq.n	800403a <_svfiprintf_r+0xfa>
 800400e:	9a07      	ldr	r2, [sp, #28]
 8004010:	4654      	mov	r4, sl
 8004012:	2000      	movs	r0, #0
 8004014:	f04f 0c0a 	mov.w	ip, #10
 8004018:	4621      	mov	r1, r4
 800401a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800401e:	3b30      	subs	r3, #48	@ 0x30
 8004020:	2b09      	cmp	r3, #9
 8004022:	d94b      	bls.n	80040bc <_svfiprintf_r+0x17c>
 8004024:	b1b0      	cbz	r0, 8004054 <_svfiprintf_r+0x114>
 8004026:	9207      	str	r2, [sp, #28]
 8004028:	e014      	b.n	8004054 <_svfiprintf_r+0x114>
 800402a:	eba0 0308 	sub.w	r3, r0, r8
 800402e:	fa09 f303 	lsl.w	r3, r9, r3
 8004032:	4313      	orrs	r3, r2
 8004034:	9304      	str	r3, [sp, #16]
 8004036:	46a2      	mov	sl, r4
 8004038:	e7d2      	b.n	8003fe0 <_svfiprintf_r+0xa0>
 800403a:	9b03      	ldr	r3, [sp, #12]
 800403c:	1d19      	adds	r1, r3, #4
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	9103      	str	r1, [sp, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	bfbb      	ittet	lt
 8004046:	425b      	neglt	r3, r3
 8004048:	f042 0202 	orrlt.w	r2, r2, #2
 800404c:	9307      	strge	r3, [sp, #28]
 800404e:	9307      	strlt	r3, [sp, #28]
 8004050:	bfb8      	it	lt
 8004052:	9204      	strlt	r2, [sp, #16]
 8004054:	7823      	ldrb	r3, [r4, #0]
 8004056:	2b2e      	cmp	r3, #46	@ 0x2e
 8004058:	d10a      	bne.n	8004070 <_svfiprintf_r+0x130>
 800405a:	7863      	ldrb	r3, [r4, #1]
 800405c:	2b2a      	cmp	r3, #42	@ 0x2a
 800405e:	d132      	bne.n	80040c6 <_svfiprintf_r+0x186>
 8004060:	9b03      	ldr	r3, [sp, #12]
 8004062:	1d1a      	adds	r2, r3, #4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	9203      	str	r2, [sp, #12]
 8004068:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800406c:	3402      	adds	r4, #2
 800406e:	9305      	str	r3, [sp, #20]
 8004070:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004128 <_svfiprintf_r+0x1e8>
 8004074:	7821      	ldrb	r1, [r4, #0]
 8004076:	2203      	movs	r2, #3
 8004078:	4650      	mov	r0, sl
 800407a:	f7fc f881 	bl	8000180 <memchr>
 800407e:	b138      	cbz	r0, 8004090 <_svfiprintf_r+0x150>
 8004080:	9b04      	ldr	r3, [sp, #16]
 8004082:	eba0 000a 	sub.w	r0, r0, sl
 8004086:	2240      	movs	r2, #64	@ 0x40
 8004088:	4082      	lsls	r2, r0
 800408a:	4313      	orrs	r3, r2
 800408c:	3401      	adds	r4, #1
 800408e:	9304      	str	r3, [sp, #16]
 8004090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004094:	4825      	ldr	r0, [pc, #148]	@ (800412c <_svfiprintf_r+0x1ec>)
 8004096:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800409a:	2206      	movs	r2, #6
 800409c:	f7fc f870 	bl	8000180 <memchr>
 80040a0:	2800      	cmp	r0, #0
 80040a2:	d036      	beq.n	8004112 <_svfiprintf_r+0x1d2>
 80040a4:	4b22      	ldr	r3, [pc, #136]	@ (8004130 <_svfiprintf_r+0x1f0>)
 80040a6:	bb1b      	cbnz	r3, 80040f0 <_svfiprintf_r+0x1b0>
 80040a8:	9b03      	ldr	r3, [sp, #12]
 80040aa:	3307      	adds	r3, #7
 80040ac:	f023 0307 	bic.w	r3, r3, #7
 80040b0:	3308      	adds	r3, #8
 80040b2:	9303      	str	r3, [sp, #12]
 80040b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040b6:	4433      	add	r3, r6
 80040b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80040ba:	e76a      	b.n	8003f92 <_svfiprintf_r+0x52>
 80040bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80040c0:	460c      	mov	r4, r1
 80040c2:	2001      	movs	r0, #1
 80040c4:	e7a8      	b.n	8004018 <_svfiprintf_r+0xd8>
 80040c6:	2300      	movs	r3, #0
 80040c8:	3401      	adds	r4, #1
 80040ca:	9305      	str	r3, [sp, #20]
 80040cc:	4619      	mov	r1, r3
 80040ce:	f04f 0c0a 	mov.w	ip, #10
 80040d2:	4620      	mov	r0, r4
 80040d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040d8:	3a30      	subs	r2, #48	@ 0x30
 80040da:	2a09      	cmp	r2, #9
 80040dc:	d903      	bls.n	80040e6 <_svfiprintf_r+0x1a6>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0c6      	beq.n	8004070 <_svfiprintf_r+0x130>
 80040e2:	9105      	str	r1, [sp, #20]
 80040e4:	e7c4      	b.n	8004070 <_svfiprintf_r+0x130>
 80040e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80040ea:	4604      	mov	r4, r0
 80040ec:	2301      	movs	r3, #1
 80040ee:	e7f0      	b.n	80040d2 <_svfiprintf_r+0x192>
 80040f0:	ab03      	add	r3, sp, #12
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	462a      	mov	r2, r5
 80040f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004134 <_svfiprintf_r+0x1f4>)
 80040f8:	a904      	add	r1, sp, #16
 80040fa:	4638      	mov	r0, r7
 80040fc:	f3af 8000 	nop.w
 8004100:	1c42      	adds	r2, r0, #1
 8004102:	4606      	mov	r6, r0
 8004104:	d1d6      	bne.n	80040b4 <_svfiprintf_r+0x174>
 8004106:	89ab      	ldrh	r3, [r5, #12]
 8004108:	065b      	lsls	r3, r3, #25
 800410a:	f53f af2d 	bmi.w	8003f68 <_svfiprintf_r+0x28>
 800410e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004110:	e72c      	b.n	8003f6c <_svfiprintf_r+0x2c>
 8004112:	ab03      	add	r3, sp, #12
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	462a      	mov	r2, r5
 8004118:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <_svfiprintf_r+0x1f4>)
 800411a:	a904      	add	r1, sp, #16
 800411c:	4638      	mov	r0, r7
 800411e:	f000 f879 	bl	8004214 <_printf_i>
 8004122:	e7ed      	b.n	8004100 <_svfiprintf_r+0x1c0>
 8004124:	080046a8 	.word	0x080046a8
 8004128:	080046ae 	.word	0x080046ae
 800412c:	080046b2 	.word	0x080046b2
 8004130:	00000000 	.word	0x00000000
 8004134:	08003e89 	.word	0x08003e89

08004138 <_printf_common>:
 8004138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800413c:	4616      	mov	r6, r2
 800413e:	4698      	mov	r8, r3
 8004140:	688a      	ldr	r2, [r1, #8]
 8004142:	690b      	ldr	r3, [r1, #16]
 8004144:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004148:	4293      	cmp	r3, r2
 800414a:	bfb8      	it	lt
 800414c:	4613      	movlt	r3, r2
 800414e:	6033      	str	r3, [r6, #0]
 8004150:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004154:	4607      	mov	r7, r0
 8004156:	460c      	mov	r4, r1
 8004158:	b10a      	cbz	r2, 800415e <_printf_common+0x26>
 800415a:	3301      	adds	r3, #1
 800415c:	6033      	str	r3, [r6, #0]
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	0699      	lsls	r1, r3, #26
 8004162:	bf42      	ittt	mi
 8004164:	6833      	ldrmi	r3, [r6, #0]
 8004166:	3302      	addmi	r3, #2
 8004168:	6033      	strmi	r3, [r6, #0]
 800416a:	6825      	ldr	r5, [r4, #0]
 800416c:	f015 0506 	ands.w	r5, r5, #6
 8004170:	d106      	bne.n	8004180 <_printf_common+0x48>
 8004172:	f104 0a19 	add.w	sl, r4, #25
 8004176:	68e3      	ldr	r3, [r4, #12]
 8004178:	6832      	ldr	r2, [r6, #0]
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	42ab      	cmp	r3, r5
 800417e:	dc26      	bgt.n	80041ce <_printf_common+0x96>
 8004180:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004184:	6822      	ldr	r2, [r4, #0]
 8004186:	3b00      	subs	r3, #0
 8004188:	bf18      	it	ne
 800418a:	2301      	movne	r3, #1
 800418c:	0692      	lsls	r2, r2, #26
 800418e:	d42b      	bmi.n	80041e8 <_printf_common+0xb0>
 8004190:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004194:	4641      	mov	r1, r8
 8004196:	4638      	mov	r0, r7
 8004198:	47c8      	blx	r9
 800419a:	3001      	adds	r0, #1
 800419c:	d01e      	beq.n	80041dc <_printf_common+0xa4>
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	6922      	ldr	r2, [r4, #16]
 80041a2:	f003 0306 	and.w	r3, r3, #6
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	bf02      	ittt	eq
 80041aa:	68e5      	ldreq	r5, [r4, #12]
 80041ac:	6833      	ldreq	r3, [r6, #0]
 80041ae:	1aed      	subeq	r5, r5, r3
 80041b0:	68a3      	ldr	r3, [r4, #8]
 80041b2:	bf0c      	ite	eq
 80041b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041b8:	2500      	movne	r5, #0
 80041ba:	4293      	cmp	r3, r2
 80041bc:	bfc4      	itt	gt
 80041be:	1a9b      	subgt	r3, r3, r2
 80041c0:	18ed      	addgt	r5, r5, r3
 80041c2:	2600      	movs	r6, #0
 80041c4:	341a      	adds	r4, #26
 80041c6:	42b5      	cmp	r5, r6
 80041c8:	d11a      	bne.n	8004200 <_printf_common+0xc8>
 80041ca:	2000      	movs	r0, #0
 80041cc:	e008      	b.n	80041e0 <_printf_common+0xa8>
 80041ce:	2301      	movs	r3, #1
 80041d0:	4652      	mov	r2, sl
 80041d2:	4641      	mov	r1, r8
 80041d4:	4638      	mov	r0, r7
 80041d6:	47c8      	blx	r9
 80041d8:	3001      	adds	r0, #1
 80041da:	d103      	bne.n	80041e4 <_printf_common+0xac>
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e4:	3501      	adds	r5, #1
 80041e6:	e7c6      	b.n	8004176 <_printf_common+0x3e>
 80041e8:	18e1      	adds	r1, r4, r3
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	2030      	movs	r0, #48	@ 0x30
 80041ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041f2:	4422      	add	r2, r4
 80041f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041fc:	3302      	adds	r3, #2
 80041fe:	e7c7      	b.n	8004190 <_printf_common+0x58>
 8004200:	2301      	movs	r3, #1
 8004202:	4622      	mov	r2, r4
 8004204:	4641      	mov	r1, r8
 8004206:	4638      	mov	r0, r7
 8004208:	47c8      	blx	r9
 800420a:	3001      	adds	r0, #1
 800420c:	d0e6      	beq.n	80041dc <_printf_common+0xa4>
 800420e:	3601      	adds	r6, #1
 8004210:	e7d9      	b.n	80041c6 <_printf_common+0x8e>
	...

08004214 <_printf_i>:
 8004214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004218:	7e0f      	ldrb	r7, [r1, #24]
 800421a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800421c:	2f78      	cmp	r7, #120	@ 0x78
 800421e:	4691      	mov	r9, r2
 8004220:	4680      	mov	r8, r0
 8004222:	460c      	mov	r4, r1
 8004224:	469a      	mov	sl, r3
 8004226:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800422a:	d807      	bhi.n	800423c <_printf_i+0x28>
 800422c:	2f62      	cmp	r7, #98	@ 0x62
 800422e:	d80a      	bhi.n	8004246 <_printf_i+0x32>
 8004230:	2f00      	cmp	r7, #0
 8004232:	f000 80d2 	beq.w	80043da <_printf_i+0x1c6>
 8004236:	2f58      	cmp	r7, #88	@ 0x58
 8004238:	f000 80b9 	beq.w	80043ae <_printf_i+0x19a>
 800423c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004240:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004244:	e03a      	b.n	80042bc <_printf_i+0xa8>
 8004246:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800424a:	2b15      	cmp	r3, #21
 800424c:	d8f6      	bhi.n	800423c <_printf_i+0x28>
 800424e:	a101      	add	r1, pc, #4	@ (adr r1, 8004254 <_printf_i+0x40>)
 8004250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004254:	080042ad 	.word	0x080042ad
 8004258:	080042c1 	.word	0x080042c1
 800425c:	0800423d 	.word	0x0800423d
 8004260:	0800423d 	.word	0x0800423d
 8004264:	0800423d 	.word	0x0800423d
 8004268:	0800423d 	.word	0x0800423d
 800426c:	080042c1 	.word	0x080042c1
 8004270:	0800423d 	.word	0x0800423d
 8004274:	0800423d 	.word	0x0800423d
 8004278:	0800423d 	.word	0x0800423d
 800427c:	0800423d 	.word	0x0800423d
 8004280:	080043c1 	.word	0x080043c1
 8004284:	080042eb 	.word	0x080042eb
 8004288:	0800437b 	.word	0x0800437b
 800428c:	0800423d 	.word	0x0800423d
 8004290:	0800423d 	.word	0x0800423d
 8004294:	080043e3 	.word	0x080043e3
 8004298:	0800423d 	.word	0x0800423d
 800429c:	080042eb 	.word	0x080042eb
 80042a0:	0800423d 	.word	0x0800423d
 80042a4:	0800423d 	.word	0x0800423d
 80042a8:	08004383 	.word	0x08004383
 80042ac:	6833      	ldr	r3, [r6, #0]
 80042ae:	1d1a      	adds	r2, r3, #4
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6032      	str	r2, [r6, #0]
 80042b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80042bc:	2301      	movs	r3, #1
 80042be:	e09d      	b.n	80043fc <_printf_i+0x1e8>
 80042c0:	6833      	ldr	r3, [r6, #0]
 80042c2:	6820      	ldr	r0, [r4, #0]
 80042c4:	1d19      	adds	r1, r3, #4
 80042c6:	6031      	str	r1, [r6, #0]
 80042c8:	0606      	lsls	r6, r0, #24
 80042ca:	d501      	bpl.n	80042d0 <_printf_i+0xbc>
 80042cc:	681d      	ldr	r5, [r3, #0]
 80042ce:	e003      	b.n	80042d8 <_printf_i+0xc4>
 80042d0:	0645      	lsls	r5, r0, #25
 80042d2:	d5fb      	bpl.n	80042cc <_printf_i+0xb8>
 80042d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042d8:	2d00      	cmp	r5, #0
 80042da:	da03      	bge.n	80042e4 <_printf_i+0xd0>
 80042dc:	232d      	movs	r3, #45	@ 0x2d
 80042de:	426d      	negs	r5, r5
 80042e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042e4:	4859      	ldr	r0, [pc, #356]	@ (800444c <_printf_i+0x238>)
 80042e6:	230a      	movs	r3, #10
 80042e8:	e011      	b.n	800430e <_printf_i+0xfa>
 80042ea:	6821      	ldr	r1, [r4, #0]
 80042ec:	6833      	ldr	r3, [r6, #0]
 80042ee:	0608      	lsls	r0, r1, #24
 80042f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80042f4:	d402      	bmi.n	80042fc <_printf_i+0xe8>
 80042f6:	0649      	lsls	r1, r1, #25
 80042f8:	bf48      	it	mi
 80042fa:	b2ad      	uxthmi	r5, r5
 80042fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80042fe:	4853      	ldr	r0, [pc, #332]	@ (800444c <_printf_i+0x238>)
 8004300:	6033      	str	r3, [r6, #0]
 8004302:	bf14      	ite	ne
 8004304:	230a      	movne	r3, #10
 8004306:	2308      	moveq	r3, #8
 8004308:	2100      	movs	r1, #0
 800430a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800430e:	6866      	ldr	r6, [r4, #4]
 8004310:	60a6      	str	r6, [r4, #8]
 8004312:	2e00      	cmp	r6, #0
 8004314:	bfa2      	ittt	ge
 8004316:	6821      	ldrge	r1, [r4, #0]
 8004318:	f021 0104 	bicge.w	r1, r1, #4
 800431c:	6021      	strge	r1, [r4, #0]
 800431e:	b90d      	cbnz	r5, 8004324 <_printf_i+0x110>
 8004320:	2e00      	cmp	r6, #0
 8004322:	d04b      	beq.n	80043bc <_printf_i+0x1a8>
 8004324:	4616      	mov	r6, r2
 8004326:	fbb5 f1f3 	udiv	r1, r5, r3
 800432a:	fb03 5711 	mls	r7, r3, r1, r5
 800432e:	5dc7      	ldrb	r7, [r0, r7]
 8004330:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004334:	462f      	mov	r7, r5
 8004336:	42bb      	cmp	r3, r7
 8004338:	460d      	mov	r5, r1
 800433a:	d9f4      	bls.n	8004326 <_printf_i+0x112>
 800433c:	2b08      	cmp	r3, #8
 800433e:	d10b      	bne.n	8004358 <_printf_i+0x144>
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	07df      	lsls	r7, r3, #31
 8004344:	d508      	bpl.n	8004358 <_printf_i+0x144>
 8004346:	6923      	ldr	r3, [r4, #16]
 8004348:	6861      	ldr	r1, [r4, #4]
 800434a:	4299      	cmp	r1, r3
 800434c:	bfde      	ittt	le
 800434e:	2330      	movle	r3, #48	@ 0x30
 8004350:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004354:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004358:	1b92      	subs	r2, r2, r6
 800435a:	6122      	str	r2, [r4, #16]
 800435c:	f8cd a000 	str.w	sl, [sp]
 8004360:	464b      	mov	r3, r9
 8004362:	aa03      	add	r2, sp, #12
 8004364:	4621      	mov	r1, r4
 8004366:	4640      	mov	r0, r8
 8004368:	f7ff fee6 	bl	8004138 <_printf_common>
 800436c:	3001      	adds	r0, #1
 800436e:	d14a      	bne.n	8004406 <_printf_i+0x1f2>
 8004370:	f04f 30ff 	mov.w	r0, #4294967295
 8004374:	b004      	add	sp, #16
 8004376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	f043 0320 	orr.w	r3, r3, #32
 8004380:	6023      	str	r3, [r4, #0]
 8004382:	4833      	ldr	r0, [pc, #204]	@ (8004450 <_printf_i+0x23c>)
 8004384:	2778      	movs	r7, #120	@ 0x78
 8004386:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	6831      	ldr	r1, [r6, #0]
 800438e:	061f      	lsls	r7, r3, #24
 8004390:	f851 5b04 	ldr.w	r5, [r1], #4
 8004394:	d402      	bmi.n	800439c <_printf_i+0x188>
 8004396:	065f      	lsls	r7, r3, #25
 8004398:	bf48      	it	mi
 800439a:	b2ad      	uxthmi	r5, r5
 800439c:	6031      	str	r1, [r6, #0]
 800439e:	07d9      	lsls	r1, r3, #31
 80043a0:	bf44      	itt	mi
 80043a2:	f043 0320 	orrmi.w	r3, r3, #32
 80043a6:	6023      	strmi	r3, [r4, #0]
 80043a8:	b11d      	cbz	r5, 80043b2 <_printf_i+0x19e>
 80043aa:	2310      	movs	r3, #16
 80043ac:	e7ac      	b.n	8004308 <_printf_i+0xf4>
 80043ae:	4827      	ldr	r0, [pc, #156]	@ (800444c <_printf_i+0x238>)
 80043b0:	e7e9      	b.n	8004386 <_printf_i+0x172>
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	f023 0320 	bic.w	r3, r3, #32
 80043b8:	6023      	str	r3, [r4, #0]
 80043ba:	e7f6      	b.n	80043aa <_printf_i+0x196>
 80043bc:	4616      	mov	r6, r2
 80043be:	e7bd      	b.n	800433c <_printf_i+0x128>
 80043c0:	6833      	ldr	r3, [r6, #0]
 80043c2:	6825      	ldr	r5, [r4, #0]
 80043c4:	6961      	ldr	r1, [r4, #20]
 80043c6:	1d18      	adds	r0, r3, #4
 80043c8:	6030      	str	r0, [r6, #0]
 80043ca:	062e      	lsls	r6, r5, #24
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	d501      	bpl.n	80043d4 <_printf_i+0x1c0>
 80043d0:	6019      	str	r1, [r3, #0]
 80043d2:	e002      	b.n	80043da <_printf_i+0x1c6>
 80043d4:	0668      	lsls	r0, r5, #25
 80043d6:	d5fb      	bpl.n	80043d0 <_printf_i+0x1bc>
 80043d8:	8019      	strh	r1, [r3, #0]
 80043da:	2300      	movs	r3, #0
 80043dc:	6123      	str	r3, [r4, #16]
 80043de:	4616      	mov	r6, r2
 80043e0:	e7bc      	b.n	800435c <_printf_i+0x148>
 80043e2:	6833      	ldr	r3, [r6, #0]
 80043e4:	1d1a      	adds	r2, r3, #4
 80043e6:	6032      	str	r2, [r6, #0]
 80043e8:	681e      	ldr	r6, [r3, #0]
 80043ea:	6862      	ldr	r2, [r4, #4]
 80043ec:	2100      	movs	r1, #0
 80043ee:	4630      	mov	r0, r6
 80043f0:	f7fb fec6 	bl	8000180 <memchr>
 80043f4:	b108      	cbz	r0, 80043fa <_printf_i+0x1e6>
 80043f6:	1b80      	subs	r0, r0, r6
 80043f8:	6060      	str	r0, [r4, #4]
 80043fa:	6863      	ldr	r3, [r4, #4]
 80043fc:	6123      	str	r3, [r4, #16]
 80043fe:	2300      	movs	r3, #0
 8004400:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004404:	e7aa      	b.n	800435c <_printf_i+0x148>
 8004406:	6923      	ldr	r3, [r4, #16]
 8004408:	4632      	mov	r2, r6
 800440a:	4649      	mov	r1, r9
 800440c:	4640      	mov	r0, r8
 800440e:	47d0      	blx	sl
 8004410:	3001      	adds	r0, #1
 8004412:	d0ad      	beq.n	8004370 <_printf_i+0x15c>
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	079b      	lsls	r3, r3, #30
 8004418:	d413      	bmi.n	8004442 <_printf_i+0x22e>
 800441a:	68e0      	ldr	r0, [r4, #12]
 800441c:	9b03      	ldr	r3, [sp, #12]
 800441e:	4298      	cmp	r0, r3
 8004420:	bfb8      	it	lt
 8004422:	4618      	movlt	r0, r3
 8004424:	e7a6      	b.n	8004374 <_printf_i+0x160>
 8004426:	2301      	movs	r3, #1
 8004428:	4632      	mov	r2, r6
 800442a:	4649      	mov	r1, r9
 800442c:	4640      	mov	r0, r8
 800442e:	47d0      	blx	sl
 8004430:	3001      	adds	r0, #1
 8004432:	d09d      	beq.n	8004370 <_printf_i+0x15c>
 8004434:	3501      	adds	r5, #1
 8004436:	68e3      	ldr	r3, [r4, #12]
 8004438:	9903      	ldr	r1, [sp, #12]
 800443a:	1a5b      	subs	r3, r3, r1
 800443c:	42ab      	cmp	r3, r5
 800443e:	dcf2      	bgt.n	8004426 <_printf_i+0x212>
 8004440:	e7eb      	b.n	800441a <_printf_i+0x206>
 8004442:	2500      	movs	r5, #0
 8004444:	f104 0619 	add.w	r6, r4, #25
 8004448:	e7f5      	b.n	8004436 <_printf_i+0x222>
 800444a:	bf00      	nop
 800444c:	080046b9 	.word	0x080046b9
 8004450:	080046ca 	.word	0x080046ca

08004454 <memmove>:
 8004454:	4288      	cmp	r0, r1
 8004456:	b510      	push	{r4, lr}
 8004458:	eb01 0402 	add.w	r4, r1, r2
 800445c:	d902      	bls.n	8004464 <memmove+0x10>
 800445e:	4284      	cmp	r4, r0
 8004460:	4623      	mov	r3, r4
 8004462:	d807      	bhi.n	8004474 <memmove+0x20>
 8004464:	1e43      	subs	r3, r0, #1
 8004466:	42a1      	cmp	r1, r4
 8004468:	d008      	beq.n	800447c <memmove+0x28>
 800446a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800446e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004472:	e7f8      	b.n	8004466 <memmove+0x12>
 8004474:	4402      	add	r2, r0
 8004476:	4601      	mov	r1, r0
 8004478:	428a      	cmp	r2, r1
 800447a:	d100      	bne.n	800447e <memmove+0x2a>
 800447c:	bd10      	pop	{r4, pc}
 800447e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004482:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004486:	e7f7      	b.n	8004478 <memmove+0x24>

08004488 <_sbrk_r>:
 8004488:	b538      	push	{r3, r4, r5, lr}
 800448a:	4d06      	ldr	r5, [pc, #24]	@ (80044a4 <_sbrk_r+0x1c>)
 800448c:	2300      	movs	r3, #0
 800448e:	4604      	mov	r4, r0
 8004490:	4608      	mov	r0, r1
 8004492:	602b      	str	r3, [r5, #0]
 8004494:	f7fc fbd6 	bl	8000c44 <_sbrk>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d102      	bne.n	80044a2 <_sbrk_r+0x1a>
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	b103      	cbz	r3, 80044a2 <_sbrk_r+0x1a>
 80044a0:	6023      	str	r3, [r4, #0]
 80044a2:	bd38      	pop	{r3, r4, r5, pc}
 80044a4:	200002e8 	.word	0x200002e8

080044a8 <memcpy>:
 80044a8:	440a      	add	r2, r1
 80044aa:	4291      	cmp	r1, r2
 80044ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80044b0:	d100      	bne.n	80044b4 <memcpy+0xc>
 80044b2:	4770      	bx	lr
 80044b4:	b510      	push	{r4, lr}
 80044b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044be:	4291      	cmp	r1, r2
 80044c0:	d1f9      	bne.n	80044b6 <memcpy+0xe>
 80044c2:	bd10      	pop	{r4, pc}

080044c4 <_realloc_r>:
 80044c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044c8:	4680      	mov	r8, r0
 80044ca:	4615      	mov	r5, r2
 80044cc:	460c      	mov	r4, r1
 80044ce:	b921      	cbnz	r1, 80044da <_realloc_r+0x16>
 80044d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044d4:	4611      	mov	r1, r2
 80044d6:	f7ff bc4b 	b.w	8003d70 <_malloc_r>
 80044da:	b92a      	cbnz	r2, 80044e8 <_realloc_r+0x24>
 80044dc:	f7ff fbdc 	bl	8003c98 <_free_r>
 80044e0:	2400      	movs	r4, #0
 80044e2:	4620      	mov	r0, r4
 80044e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044e8:	f000 f81a 	bl	8004520 <_malloc_usable_size_r>
 80044ec:	4285      	cmp	r5, r0
 80044ee:	4606      	mov	r6, r0
 80044f0:	d802      	bhi.n	80044f8 <_realloc_r+0x34>
 80044f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80044f6:	d8f4      	bhi.n	80044e2 <_realloc_r+0x1e>
 80044f8:	4629      	mov	r1, r5
 80044fa:	4640      	mov	r0, r8
 80044fc:	f7ff fc38 	bl	8003d70 <_malloc_r>
 8004500:	4607      	mov	r7, r0
 8004502:	2800      	cmp	r0, #0
 8004504:	d0ec      	beq.n	80044e0 <_realloc_r+0x1c>
 8004506:	42b5      	cmp	r5, r6
 8004508:	462a      	mov	r2, r5
 800450a:	4621      	mov	r1, r4
 800450c:	bf28      	it	cs
 800450e:	4632      	movcs	r2, r6
 8004510:	f7ff ffca 	bl	80044a8 <memcpy>
 8004514:	4621      	mov	r1, r4
 8004516:	4640      	mov	r0, r8
 8004518:	f7ff fbbe 	bl	8003c98 <_free_r>
 800451c:	463c      	mov	r4, r7
 800451e:	e7e0      	b.n	80044e2 <_realloc_r+0x1e>

08004520 <_malloc_usable_size_r>:
 8004520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004524:	1f18      	subs	r0, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	bfbc      	itt	lt
 800452a:	580b      	ldrlt	r3, [r1, r0]
 800452c:	18c0      	addlt	r0, r0, r3
 800452e:	4770      	bx	lr

08004530 <_init>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	bf00      	nop
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr

0800453c <_fini>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	bf00      	nop
 8004540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004542:	bc08      	pop	{r3}
 8004544:	469e      	mov	lr, r3
 8004546:	4770      	bx	lr
